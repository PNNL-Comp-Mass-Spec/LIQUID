<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InformedProteomics.Backend</name>
    </assembly>
    <members>
        <member name="T:InformedProteomics.Backend.Database.DatabaseSearchMode">
            <summary>
            Available database search modes
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.DatabaseSearchMode.Target">
            <summary>
            Target search only
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.DatabaseSearchMode.Decoy">
            <summary>
            Decoy search only
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.DatabaseSearchMode.Both">
            <summary>
            Target and Decoy search
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Database.FastaDatabaseConstants">
            <summary>
            Constants used in multiple places where Fasta Databases are used
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabaseConstants.DecoyProteinPrefix">
            <summary>
            Prefix to flag decoy proteins
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabaseConstants.Delimiter">
            <summary>
            Sequence delimiter in the backing files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabaseConstants.LastCharacter">
            <summary>
            Last character marker in the backing files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.FastaDatabaseConstants.AnnotationDelimiter">
            <summary>
            Annotation delimiter in the backing files
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Database.FastaDatabaseConstants.ValidFASTAExtension(System.String)">
            <summary>
            Examine the extension on the database file
            Return true if .fasta or .fa or .faa
            Otherwise, return false
            </summary>
            <param name="databaseFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Database.InternalCleavageType">
            <summary>
            Type of peptide cleavage to use (for Top-Down searches)
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Database.InternalCleavageType.NoInternalCleavage">
            <summary>
            Only intact proteins
            </summary>
            <remarks>No cleavages will be performed on the protein sequences
            NOTE: Allows C-term cleavages up to the specified maximum</remarks>
        </member>
        <member name="F:InformedProteomics.Backend.Database.InternalCleavageType.SingleInternalCleavage">
            <summary>
            Only sequences that match either the N terminus cleavages parameter or the C terminus cleavages parameter
            </summary>
            <remarks>If the C terminus has no cleavage, the N terminus can have cleavages up to the specified N terminus cleavages max;
            if the N terminus has no cleavages, the C terminus can have cleavages up to the specified C terminus cleavages max.
            NOTE: Any sequence minLength &lt;= length &lt;= maxLength, with C or N terminus cleavages</remarks>
        </member>
        <member name="F:InformedProteomics.Backend.Database.InternalCleavageType.MultipleInternalCleavages">
            <summary>
            Any sequence in a protein that matches the parameters for N and C terminus cleavages
            </summary>
            <remarks>All cleavage combinations that meet the parameters for N and C terminus cleavage maximums will be checked.
            NOTE: Any sequence minLength &lt;= length &lt;= maxLength</remarks>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Biology.Atom">
            <summary>
            Atom class - elements of the periodic table
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Atom.#ctor(System.String,System.Double,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="code"></param>
            <param name="mass"></param>
            <param name="nominalMass"></param>
            <param name="name"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Atom.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Atom.Code">
            <summary>
            Atomic Symbol
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Atom.Name">
            <summary>
            Name of element
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Atom.Mass">
            <summary>
            Monoisotopic mass of element
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Atom.NominalMass">
            <summary>
            Nominal mass
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Atom.AtomArr">
            <summary>
            Get an array of all supported elements, and some compounds
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Atom.C">
            <summary>
            Monoisotopic mass of Carbon
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Atom.H">
            <summary>
            Monoisotopic mass of Hydrogen
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Atom.N">
            <summary>
            Monoisotopic mass of Nitrogen
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Atom.O">
            <summary>
            Monoisotopic mass of Oxygen
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Atom.S">
            <summary>
            Monoisotopic mass of Sulfur
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Atom.Get(System.String)">
            <summary>
            Get the atom that corresponds to the provided atomic symbol
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Atom.Equals(InformedProteomics.Backend.Data.Biology.Atom)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Atom.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Atom.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Biology.Constants">
            <summary>
            Common constants
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Constants.RescalingConstant">
            <summary>
            Convert between nominal mass and monoisotopic mass with minimal error
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Constants.RescalingConstantHighPrecision">
            <summary>
            Used to convert between bin number and mass
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Constants.C13">
            <summary>
            Carbon-13 isotopic mass
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Constants.C13MinusC12">
            <summary>
            Mass difference between Carbon-13 and Carbon-12
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Constants.Proton">
            <summary>
            Mass of a proton
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Constants.GetBinNum(System.Double)">
            <summary>
            Get the bin number of the supplied mass <paramref name="m"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Constants.GetBinNumHighPrecision(System.Double)">
            <summary>
            Get the high-precision bin number of the supplied mass <paramref name="m"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Biology.Enzyme">
            <summary>
            Enzyme, specifically digestion enzymes
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Enzyme.Name">
            <summary>
            Name of the enzyme
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Enzyme.Residues">
            <summary>
            Residues cleaved by the enzyme
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Enzyme.IsNTerm">
            <summary>
            If the enzyme affects the N-Terminus
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Enzyme.Description">
            <summary>
            Description of the enzyme
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Enzyme.PsiCvAccession">
            <summary>
            PSI-MS CV Accession for the enzyme
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Enzyme.IsCleavable(System.Char)">
            <summary>
            Test if the enzyme will cleave at <paramref name="residue"/>
            </summary>
            <param name="residue"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.UnspecificCleavage">
            <summary>
            Unspecific cleavage
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.Trypsin">
            <summary>
            Trypsin enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.Chymotrypsin">
            <summary>
            Chymotrypsin enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.LysC">
            <summary>
            LysC enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.LysN">
            <summary>
            LysN enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.GluC">
            <summary>
            GluC enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.ArgC">
            <summary>
            ArgC enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.AspN">
            <summary>
            AspN enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.Alp">
            <summary>
            Alp enzyme
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Biology.Enzyme.NoCleavage">
            <summary>
            No cleavage enzyme
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Biology.IMatter">
            <summary>
            Interface for biological components classified as Matter (having a mass)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.IMatter.Mass">
            <summary>
            Mass of the biological component
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Biology.IMolecule">
            <summary>
            Interface for biological components that have an elemental composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.IMolecule.Composition">
            <summary>
            Elemental composition of the biological component
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Biology.Ion">
            <summary>
            Ion class: a biological component with a charge
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Ion.Composition">
            <summary>
            Elemental composition of the ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Biology.Ion.Charge">
            <summary>
            Electrical charge of the ion
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.#ctor(InformedProteomics.Backend.Data.Composition.Composition,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="composition"></param>
            <param name="charge"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetMonoIsotopicMz">
            <summary>
            Get the monoisotopic m/z of the ion
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopeMz(System.Int32)">
            <summary>
            Gets the m/z of ith isotope
            </summary>
            <param name="isotopeIndex">isotope index. 0 means mono-isotope, 1 means 2nd isotope, etc.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetMostAbundantIsotopeMz">
            <summary>
            Gets the m/z of the most abundant isotope peak
            </summary>
            <returns>m/z of the most abundant isotope peak</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopeMz(System.Double)">
            <summary>
            Gets the m/z of ith isotope
            </summary>
            <param name="isotopeIndexInRealNumber">isotope index in real number. 0 means mono-isotope, 0.5 means the center of mono and 2nd isotopes.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopes(System.Double)">
            <summary>
            Gets theoretical isotope peaks whose intensities are relative to the most intense isotope
            </summary>
            <param name="minimumRelativeIntensity">Minimum intensity threshold for including the isotope in the results</param>
            <returns>Enumerable of isotope peaks</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopes(System.Int32)">
            <summary>
            Gets top n (numIsotopes) theoretical isotope peaks ordered by the ratios of isotopes (higher first)
            </summary>
            <param name="numIsotopes">number of isotopes</param>
            <returns>Enumerable of isotope peaks</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetTop3Isotopes">
            <summary>
            Get the top 3 isotopes for this ion
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetIsotopeMz(System.Double,System.Int32,System.Int32)">
            <summary>
            Get the m/z of the specified isotope
            </summary>
            <param name="monoIsotopicMass"></param>
            <param name="charge"></param>
            <param name="isotopeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Biology.Ion.GetMonoIsotopicMass(System.Double,System.Int32,System.Int32)">
            <summary>
            Get the monoisotopic mass of the specified isotope
            </summary>
            <param name="isotopeMz"></param>
            <param name="charge"></param>
            <param name="isotopeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Composition.AbstractComposition">
            <summary>
            Composition base class
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.AbstractComposition.Mass">
            <summary>
            Composition mass
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.AbstractComposition.NominalMass">
            <summary>
            Composition nominal mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetIsotopeMass(System.Int32)">
            <summary>
            Gets the mass of ith isotope
            </summary>
            <param name="isotopeIndex">isotope index. 0 means mono-isotope, 1 means 2nd isotope, etc.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetIsotopeMass(System.Double)">
            <summary>
            Gets the m/z of ith isotope
            </summary>
            <param name="isotopeIndexInRealNumber">isotope index in real number. 0 means mono-isotope, 0.5 means the center of mono and 2nd isotopes.</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetIsotopomerEnvelope">
            <summary>
            Get the <see cref="T:InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope"/> for this composition
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetIsotopomerEnvelopeRelativeIntensities">
            <summary>
            Get the relative intensities of the Isotopomer envelope for this composition
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.AbstractComposition.GetMostAbundantIsotopeZeroBasedIndex">
            <summary>
            Get the zero-based index of the most abundant isotope, according to the isotopomer envelope
            </summary>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Composition.Averagine">
            <summary>
            Averagine algorithm - creates isotopic envelopes based on an averaged elemental composition
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.GetIsotopomerEnvelope(System.Double)">
            <summary>
            Get the Isotopomer envelope for <paramref name="monoIsotopeMass"/>
            </summary>
            <param name="monoIsotopeMass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.GetIsotopomerEnvelopeInst(System.Double,InformedProteomics.Backend.Data.Composition.IsoProfilePredictor)">
            <summary>
            Get the Isotopomer envelope for <paramref name="monoIsotopeMass"/> using <paramref name="isoProfilePredictor"/>
            </summary>
            <param name="monoIsotopeMass"></param>
            <param name="isoProfilePredictor"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.GetTheoreticalIsotopeProfile(System.Double,System.Int32,System.Double)">
            <summary>
            Get the theoretical Isotope profile for <paramref name="monoIsotopeMass"/> at charge <paramref name="charge"/>
            </summary>
            <param name="monoIsotopeMass"></param>
            <param name="charge"></param>
            <param name="relativeIntensityThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.GetTheoreticalIsotopeProfileInst(System.Double,System.Int32,System.Double,InformedProteomics.Backend.Data.Composition.IsoProfilePredictor)">
            <summary>
            Get the theoretical Isotope profile for <paramref name="monoIsotopeMass"/> at charge <paramref name="charge"/> using <paramref name="isoProfilePredictor"/>
            </summary>
            <param name="monoIsotopeMass"></param>
            <param name="charge"></param>
            <param name="relativeIntensityThreshold"></param>
            <param name="isoProfilePredictor"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.GetIsotopomerEnvelopeFromNominalMass(System.Int32)">
            <summary>
            Get the Isotopomer envelope for the nominal mass <paramref name="nominalMass"/>
            </summary>
            <param name="nominalMass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Averagine.GetIsotopomerEnvelopeFromNominalMassInst(System.Int32,InformedProteomics.Backend.Data.Composition.IsoProfilePredictor)">
            <summary>
            Get the Isotopomer envelope for the nominal mass <paramref name="nominalMass"/> using <paramref name="isoProfilePredictor"/>
            </summary>
            <param name="nominalMass"></param>
            <param name="isoProfilePredictor"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Averagine.DefaultAveragine">
            <summary>
            Default averagine formula
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Composition.Composition">
            <summary>
            Composition, consisting of elements C, H, N, O, S, or P, and optionally additional elements
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.Zero">
            <summary>
            Empty composition
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.H2O">
            <summary>
            Water
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.NH3">
            <summary>
            Ammonia
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.NH2">
            <summary>
            Amide
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.OH">
            <summary>
            Hydroxide
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.CO">
            <summary>
            Carbon Monoxide
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.Composition.Hydrogen">
            <summary>
            Hydrogen
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor, with provided counts for C, H, N, O, S, P
            </summary>
            <param name="c"></param>
            <param name="h"></param>
            <param name="n"></param>
            <param name="o"></param>
            <param name="s"></param>
            <param name="p"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor, with provided counts for C, H, N, O, S
            </summary>
            <param name="c"></param>
            <param name="h"></param>
            <param name="n"></param>
            <param name="o"></param>
            <param name="s"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.#ctor(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Copy constructor
            </summary>
            <param name="composition"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Tuple{InformedProteomics.Backend.Data.Biology.Atom,System.Int16})">
            <summary>
            Constructor, with provided counts for C, H, N, O, S, P, and a tuple of additional element and count
            </summary>
            <param name="c"></param>
            <param name="h"></param>
            <param name="n"></param>
            <param name="o"></param>
            <param name="s"></param>
            <param name="p"></param>
            <param name="additionalElement"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{InformedProteomics.Backend.Data.Biology.Atom,System.Int16}})">
            <summary>
            Constructor, with provided counts for C, H, N, O, S, P, and tuples of additional elements and respective counts
            </summary>
            <param name="c"></param>
            <param name="h"></param>
            <param name="n"></param>
            <param name="o"></param>
            <param name="s"></param>
            <param name="p"></param>
            <param name="additionalElements"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.C">
            <summary>
            Count of Carbon atoms in the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.H">
            <summary>
            Count of Hydrogen atoms in the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.N">
            <summary>
            Count of Nitrogen atoms in the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.O">
            <summary>
            Count of Oxygen atoms in the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.S">
            <summary>
            Count of Sulfur atoms in the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.P">
            <summary>
            Count of Phosphorus atoms in the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.AdditionalElements">
            <summary>
            Map of additional elements in the composition and their respective counts
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.Mass">
            <summary>
            Mass of the composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.Composition.NominalMass">
            <summary>
            Nominal mass of the composition
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.AddComposition(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Return a new composition that consists of this composition and <paramref name="c"/>
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.Add(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Return a new composition that consists of this composition and <paramref name="c"/>
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.op_Addition(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Overloaded '+' operator to add 2 compositions
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.Negate">
            <summary>
            Return the inverse composition (all counts negative)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.op_UnaryNegation(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Unary -
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.op_Subtraction(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Overloaded '-' operator to subtract one composition from another
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.ToString">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.ToPlainString">
            <summary>
            Return the composition as an empirical formula
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.ParseFromPlainString(System.String)">
            <summary>
            Parse a plain-string empirical formula, for example
            C2H3N1O1S
            </summary>
            <param name="plainCompositionStr"></param>
            <remarks>Empirical formula cannot have parentheses or spaces</remarks>
            <returns>Composition object, or null if a parse error</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.Parse(System.String)">
            <summary>
            Parse UniMod-like composition string, for example
            H(117) C(77) N(17) O(26) S(2)
            </summary>
            <param name="compositionStr"></param>
            <remarks>Requires the use of parentheses for element counts.  Also requires whitespace (typically a space) between each element and count</remarks>
            <returns>Composition object, or null if a parse error</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.GetMonoIsotopicMass">
            <summary>
            Gets the mono-isotopic mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.Composition.GetNominalMass">
            <summary>
            Gets the mono-isotopic nominal mass
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass">
            <summary>
            A composition with a delta mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.#ctor(System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mass"></param>
            <param name="nominalMass"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="mass"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.Mass">
            <summary>
            Monoisotopic mass
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.NominalMass">
            <summary>
            Nominal mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.Add(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Return a new composition that consists of this composition added to <paramref name="c"/>
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.Negate">
            <summary>
            Return the negation of this composition
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.ToString">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.Equals(InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass)">
            <summary>
            Check 2 CompositionWithDeltaMasses for equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.CompositionWithDeltaMass.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor">
            <summary>
            Isotopic profile predictor
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.MaxNumIsotopes">
            <summary>
            Max number of isotopes to predict
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.IsotopeRelativeIntensityThreshold">
            <summary>
            The relative intensity threshold
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.GetIsotopomerEnvelop(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the Isotopomer envelope for the provided atom counts
            </summary>
            <param name="c"></param>
            <param name="h"></param>
            <param name="n"></param>
            <param name="o"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.GetIsotopomerEnvelope(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the Isotopomer envelope for the provided atom counts
            </summary>
            <param name="c"></param>
            <param name="h"></param>
            <param name="n"></param>
            <param name="o"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.Predictor">
            <summary>
            Default IsoProfilePredictor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.#ctor(System.Double,System.Int32)">
            <summary>
            Constructor, uses default isotope probabilities
            </summary>
            <param name="relativeIntensityThreshold"></param>
            <param name="maxNumIsotopes"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.#ctor(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
            Constructor, uses provided isotope probabilities
            </summary>
            <param name="probC"></param>
            <param name="probH"></param>
            <param name="probN"></param>
            <param name="probO"></param>
            <param name="probS"></param>
            <param name="relativeIntensityThreshold"></param>
            <param name="maxNumIsotopes"></param>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.DefaultProbC">
            <summary>
            Default isotope probabilities for Carbon
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.DefaultProbH">
            <summary>
            Default isotope probabilities for Hydrogen
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.DefaultProbN">
            <summary>
            Default isotope probabilities for Nitrogen
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.DefaultProbO">
            <summary>
            Default isotope probabilities for Oxygen
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.DefaultProbS">
            <summary>
            Default isotope probabilities for Sulfur
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.ProbC">
            <summary>
            Isotope probabilities for Carbon used by this instance
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.ProbH">
            <summary>
            Isotope probabilities for Hydrogen used by this instance
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.ProbN">
            <summary>
            Isotope probabilities for Nitrogen used by this instance
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.ProbO">
            <summary>
            Isotope probabilities for Oxygen used by this instance
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsoProfilePredictor.ProbS">
            <summary>
            Isotope probabilities for Sulfur used by this instance
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope">
            <summary>
            Class for a single Isotopomer envelope
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope.#ctor(System.Double[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="envelope"></param>
            <param name="mostAbundantIsotopeIndex"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope.Envelope">
            <summary>
            The Isotopomer envelope
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope.MostAbundantIsotopeIndex">
            <summary>
            Index in <see cref="P:InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope.Envelope"/> of the most abundant isotope
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Enum.SequenceLocation">
            <summary>
            Allowed locations for a modification within a sequence
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceLocation.Everywhere">
            <summary>
            Modification is allowed at any position in the sequence
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceLocation.PeptideNTerm">
            <summary>
            Modification is allowed at the peptide N-terminus
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceLocation.PeptideCTerm">
            <summary>
            Modification is allowed at the peptide C-terminus
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceLocation.ProteinNTerm">
            <summary>
            Modification is allowed at the protein N-terminus
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceLocation.ProteinCTerm">
            <summary>
            Modification is allowed at the protein C-terminus
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Enum.SequenceType">
            <summary>
            Type of sequence
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceType.Protein">
            <summary>
            Protein sequence
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Enum.SequenceType.Peptide">
            <summary>
            Peptide sequence
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.AminoAcid">
            <summary>
            Amino acid
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcid.#ctor(System.Char,System.String,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Constructor
            </summary>
            <param name="residue"></param>
            <param name="name"></param>
            <param name="comp"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.AminoAcid.Residue">
            <summary>
            Residue character/symbol
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.AminoAcid.Name">
            <summary>
            Name of amino acid
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.AminoAcid.Composition">
            <summary>
            Elemental composition of amino acid
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.AminoAcid.Mass">
            <summary>
            Monoisotopic mass of amino acid
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcid.GetNominalMass">
            <summary>
            Nominal mass of the amino acid
            </summary>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.ProteinNTerm">
            <summary>
            Protein N-Terminus marker
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.ProteinCTerm">
            <summary>
            Protein C-Terminus marker
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.PeptideNTerm">
            <summary>
            Peptide N-Terminus marker
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.PeptideCTerm">
            <summary>
            Peptide C-Terminus marker
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.Empty">
            <summary>
            Empty amino acid
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.StandardAminoAcidArr">
            <summary>
            Standard amino acids
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.StandardAminoAcidCharacters">
            <summary>
            String of standard amino acid character symbols
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcid.IsStandardAminoAcidResidue(System.Char)">
            <summary>
            Checks if <paramref name="residue"/> is a standard amino acid character
            </summary>
            <param name="residue"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.AminoAcid.StandardAminoAcidFrequency">
            <summary>
            Statistical frequency (per UniProt) of the standard amino acids
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcid.GetUniProtFrequency(System.Char)">
            <summary>
            Get the UniProt statistical frequency of <paramref name="residue"/>
            </summary>
            <param name="residue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcid.ToString">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.AminoAcidSet">
            <summary>
            Set of amino acids used in a search
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.#ctor">
            <summary>
            Generate an amino acid map with 20 standard amino acids
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.#ctor(InformedProteomics.Backend.Data.Sequence.Modification)">
            <summary>
            Generate an amino acid map with Cys static modification
            </summary>
            <param name="cysMod"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.#ctor(System.String)">
            <summary>
            Construct an amino acid map using the 20 standard amino acids and any modifications in mod file at path <paramref name="modFilePath"/>
            </summary>
            <param name="modFilePath"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.#ctor(InformedProteomics.Backend.Data.Sequence.ModFileParser)">
            <summary>
            Construct an amino acid map using the 20 standard amino acids and any modifications in mod file parsed by <paramref name="modFileParser"/>
            </summary>
            <param name="modFileParser"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.#ctor(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Sequence.SearchModification},System.Int32)">
            <summary>
            Construct an amino acid map using the 20 standard amino acids and any modifications in <paramref name="searchModifications"/>
            </summary>
            <param name="searchModifications"></param>
            <param name="maxNumModsPerSequence"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.SearchModifications">
            <summary>
            The list of search modifications provided via the mods file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetAminoAcid(System.Char)">
            <summary>
            Get the amino acid specified by character <paramref name="residue"/>, with any static modifications
            </summary>
            <param name="residue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetAminoAcid(System.Char,InformedProteomics.Backend.Data.Enum.SequenceLocation)">
            <summary>
            Get the amino acid specified by character <paramref name="residue"/> that occurs at location <paramref name="location"/>, with any static modifications
            </summary>
            <param name="residue"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetModificationIndices(System.Char)">
            <summary>
            Get the indices of modifications that apply to residue <paramref name="residue"/>
            </summary>
            <param name="residue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetModificationIndices(System.Char,InformedProteomics.Backend.Data.Enum.SequenceLocation)">
            <summary>
            Get the indices of modifications that apply to residue <paramref name="residue"/> at location <paramref name="location"/>
            </summary>
            <param name="residue"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetComposition(System.String)">
            <summary>
            Get the composition of <paramref name="sequence"/> using this amino acid map (with static modification masses added)
            </summary>
            <param name="sequence"></param>
            <returns></returns>
            <remarks>This method ignores N- and C-term specific modifications.</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetModificationParams">
            <summary>
            Get the parameters governing use of dynamic modifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.Display">
            <summary>
            Display this amino acid set on the console
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetUniqueCompositions">
            <summary>
            Get the set of unique compositions within this amino acid set
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetStandardAminoAcidSet">
            <summary>
            Get the standard amino acid set, with no modifications
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.AminoAcidSet.GetStandardAminoAcidSetWithCarboamidomethylCys">
            <summary>
            Get the standard amino acid set, with static Cysteine Alkylation (Carboamidomethyl)
            </summary>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.Cleavage">
            <summary>
            Cleavage of a composition
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Cleavage.#ctor(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Sequence.AminoAcid,InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Constructor
            </summary>
            <param name="prefixComposition"></param>
            <param name="prefixResidue"></param>
            <param name="suffixComposition"></param>
            <param name="suffixResidue"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Cleavage.PrefixComposition">
            <summary>
            Prefix composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Cleavage.SuffixComposition">
            <summary>
            Suffix composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Cleavage.PrefixResidue">
            <summary>
            Prefix residue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Cleavage.SuffixResidue">
            <summary>
            Suffix residue
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ISequenceTagGenerator">
            <summary>
            Interface of Sequence Tag Generation implementations
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ISequenceTagGenerator.GetSequenceTags(InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum)">
            <summary>
            Get the sequence tags for ProductSpectrum <paramref name="spec"/>
            </summary>
            <param name="spec"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModFileParser">
            <summary>
            Class to parse mod files
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModFileParser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="modFilePath"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModFileParser.ModFilePath">
            <summary>
            Path to mod file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModFileParser.SearchModifications">
            <summary>
            Modifications in the mod file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModFileParser.MaxNumDynModsPerSequence">
            <summary>
            Max number of dynamic modifications per sequence
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModFileParser.ParseModification(System.String)">
            <summary>
            Parse the provided modification line
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModFileParser.Parse(System.Collections.Generic.IEnumerable{System.String},System.Int32@)">
            <summary>
            Parse the provided lines, returning the modifications and the max number of dynamic mods per peptide
            </summary>
            <param name="lines"></param>
            <param name="maxNumDynModsPerPeptide"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModFileParser.Parse(System.String,System.Int32@)">
            <summary>
            Parse the provided mod file, returning modifications and the max number of dynamic mods per peptide
            </summary>
            <param name="modFilePath"></param>
            <param name="maxNumDynModsPerPeptide"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.Modification">
            <summary>
            Modification
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.MOD_MASS_FORMAT_STRING">
            <summary>
            The format string for outputting modification masses within sequences
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.UNKNOWN_PSI_MOD_ACCESSION">
            <summary>
            Integer portion of MS:1001460
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Modification.AccessionNum">
            <summary>
            The UniMod accession number of the modification
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Modification.Composition">
            <summary>
            The composition of the modification
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Modification.Name">
            <summary>
            The name of the modification
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Modification.Mass">
            <summary>
            Mass of the modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.#ctor(System.Int32,InformedProteomics.Backend.Data.Composition.Composition,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="accessionNum"></param>
            <param name="composition"></param>
            <param name="name"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="accessionNum"></param>
            <param name="deltaMass"></param>
            <param name="name"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.ToString">
            <summary>
            Returns a string that represents this modification object.
            </summary>
            <returns>
            A string that represents the modification.
            </returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.Get(System.String)">
            <summary>
            Retrieve a Modification object for the given mod
            </summary>
            <param name="psiMsName"></param>
            <remarks>Returns null if the mod name is not recognized</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.Get(System.String,System.Double)">
            <summary>
            Retrieve a Modification object for the given mod
            </summary>
            <param name="modName">ModName (either an official PSI name or a generic name)</param>
            <param name="deltaMass"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.GetFromMass(System.Double)">
            <summary>
            Get the modification that matches the given mass
            </summary>
            <param name="mass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.GetFromMass(System.String)">
            <summary>
            Get the modification that matches the given mass
            </summary>
            <param name="massStr"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.NoModification">
            <summary>
            No modification
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Acetylation">
            <summary>
            Acetylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Carbamidomethylation">
            <summary>
            Carbamidomethylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Carbamylation">
            <summary>
            Carbamylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Carboxymethylation">
            <summary>
            Carboxymethylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Deamidation">
            <summary>
            Deamidation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.NipCam">
            <summary>
            NipCam
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Phosphorylation">
            <summary>
            Phosphorylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.PyroCarbamidomethyl">
            <summary>
            PyroCarbamidomethyl
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.PyroGluE">
            <summary>
            PyroGluE
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.PyroGluQ">
            <summary>
            PyroGluQ
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Methylation">
            <summary>
            Methylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Oxidation">
            <summary>
            Oxidation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.TriOxidation">
            <summary>
            TriOxidation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.DiMethylation">
            <summary>
            DiMethylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.TriMethylation">
            <summary>
            TriMethylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Glutathione">
            <summary>
            Glutathione
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Cysteinyl">
            <summary>
            Cysteinyl
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Dehydro">
            <summary>
            Dehydro
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Itraq4Plex">
            <summary>
            Itraq4Plex
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Tmt6Plex">
            <summary>
            Tmt6Plex
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Nethylmaleimide">
            <summary>
            Nethylmaleimide
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Nitrosyl">
            <summary>
            Nitrosyl
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.ThrToAla">
            <summary>
            ThrToAla
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.Dethiomethyl">
            <summary>
            Dethiomethyl
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.DelC2H2">
            <summary>
            DelC2H2
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.SerToXle">
            <summary>
            SerToXle
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.SerToAsn">
            <summary>
            SerToAsn
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.SerToAsp">
            <summary>
            SerToAsp
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.CommonModifications">
            <summary>
            Common modifications
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.LysToHeavyLys">
            <summary>
            Heavy peptide
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.ArgToHeavyArg">
            <summary>
            Heavy peptide
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.TevFp2">
            <summary>
            Protein Probe
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.Modification.MassToModMap">
            <summary>
            Dictionary mapping mod mass (formatted with const MOD_MASS_FORMAT_STRING) to mod name
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.RegisterAndGetModification(System.String,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Register and Get the modification specified by <paramref name="name"/> and <paramref name="composition"/>
            </summary>
            <param name="name"></param>
            <param name="composition"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.RegisterAndGetModification(System.String,System.Double)">
            <summary>
            Register and Get the modification specified by <paramref name="name"/> and <paramref name="mass"/>
            </summary>
            <param name="name"></param>
            <param name="mass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.UpdateAndGetModification(System.String,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Register a new modification or update existing modification.
            </summary>
            <param name="name">The name of the modification.</param>
            <param name="composition">The composition of the modification.</param>
            <returns>Registered modification.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.UpdateAndGetModification(System.String,System.Double)">
            <summary>
            Register a new modification or update an existing modification.
            </summary>
            <param name="name">The name of the modification.</param>
            <param name="mass">The mass of the modification.</param>
            <returns>Registered modification.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.UnregisterModification(InformedProteomics.Backend.Data.Sequence.Modification)">
            <summary>
            Unregister a modification by name.
            Added by Chris.
            </summary>
            <param name="modification">The modification to remove.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Modification.Register(InformedProteomics.Backend.Data.Sequence.Modification)">
            <summary>
            Register the provided modification
            </summary>
            <param name="modification"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModificationCombination">
            <summary>
            Combination of modifications applied to an amino acid sequence
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.ModificationCombination.NoModification">
            <summary>
            No modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationCombination.#ctor(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Sequence.Modification})">
            <summary>
            Constructor
            </summary>
            <param name="modificationList"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationCombination.Composition">
            <summary>
            Composition
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationCombination.Modifications">
            <summary>
            Modifications applied to the sequence
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationCombination.GetNumModifications">
            <summary>
            Number of modifications applied to the sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationCombination.ToString">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModificationInstance">
            <summary>
            Instance of a modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationInstance.#ctor(InformedProteomics.Backend.Data.Sequence.Modification,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="modification"></param>
            <param name="index"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationInstance.Modification">
            <summary>
            Modification
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationInstance.Index">
            <summary>
            Index of the modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationInstance.ToString">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationInstance.GetModificationInstanceWithOffset(System.Int32)">
            <summary>
            Get a new <see cref="T:InformedProteomics.Backend.Data.Sequence.ModificationInstance"/> at offset <paramref name="offset"/> from this instance
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModificationParams">
            <summary>
            This class catalogs all possible combinations of modifications
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.#ctor">
            <summary>
            No modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.#ctor(InformedProteomics.Backend.Data.Sequence.Modification[],System.Int32)">
            <summary>
            Storing all possible combinations of modifications up to MaxNumDynModsPerSequence
            </summary>
            <param name="modifications">array of modifications</param>
            <param name="maxNumDynModsPerSequence">number of maximum modifications</param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationParams.MaxNumDynModsPerSequence">
            <summary>
            Max number of dynamic modifications per sequence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModificationParams.NumModificationCombinations">
            <summary>
            Gets the number of all possible modification instances
            </summary>
            <returns>the number of modification instances</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.GetModificationCombination(System.Int32)">
            <summary>
            Gets the modification combination with the specified modCombIndex
            </summary>
            <param name="modCombIndex">modification combination modCombIndex</param>
            <returns>modification combination</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.GetModification(System.Int32)">
            <summary>
            Get the modification at index <paramref name="modIndex"/>
            </summary>
            <param name="modIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.GetModificationCombinationIndex(System.Int32,System.Int32)">
            <summary>
            Get the index of a modification combination
            </summary>
            <param name="prevModCombIndex"></param>
            <param name="modIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.GetModificationIndexBetween(System.Int32,System.Int32)">
            <summary>
            Get the modification at the index between the provided indices
            </summary>
            <param name="prevModCombIndex"></param>
            <param name="curModCombIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModificationParams.GetModificationCombinations">
            <summary>
            Get all <see cref="T:InformedProteomics.Backend.Data.Sequence.ModificationCombination"/>s in this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ModifiedAminoAcid">
            <summary>
            A modified amino acid
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ModifiedAminoAcid.#ctor(InformedProteomics.Backend.Data.Sequence.AminoAcid,InformedProteomics.Backend.Data.Sequence.Modification)">
            <summary>
            Constructor
            </summary>
            <param name="aa"></param>
            <param name="modification"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ModifiedAminoAcid.Modification">
            <summary>
            Modification applied to this amino acid
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.SearchModification">
            <summary>
            A modification specified in the search
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SearchModification.#ctor(InformedProteomics.Backend.Data.Sequence.Modification,System.Char,InformedProteomics.Backend.Data.Enum.SequenceLocation,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="mod"></param>
            <param name="targetResidue"></param>
            <param name="loc"></param>
            <param name="isFixedModification"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SearchModification.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SearchModification.Modification">
            <summary>
            Modification
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SearchModification.TargetResidue">
            <summary>
            Residue targeted by <see cref="P:InformedProteomics.Backend.Data.Sequence.SearchModification.Modification"/>
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SearchModification.Location">
            <summary>
            Allowed location in sequence of <see cref="P:InformedProteomics.Backend.Data.Sequence.SearchModification.Modification"/>
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SearchModification.IsFixedModification">
            <summary>
            If the modification is fixed/static
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SearchModification.Name">
            <summary>
            Name of the modification
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SearchModification.Mass">
            <summary>
            Mass of the modification
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SearchModification.ToString">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.Sequence">
            <summary>
            A sequence of Amino Acids, with modifications
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.#ctor(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Sequence.AminoAcid})">
            <summary>
            Build a sequence from the supplied list of amino acids
            </summary>
            <param name="aaArr"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.#ctor(System.String,InformedProteomics.Backend.Data.Sequence.AminoAcidSet)">
            <summary>
            Build a sequence from the supplied character sequence, using the provided amino acid set
            </summary>
            <param name="sequence"></param>
            <param name="aminoAcidSet"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetModificationString">
            <summary>
            Get the list (as a string) of the modifications and their locations in this sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.CreateSequence(System.String,System.String,InformedProteomics.Backend.Data.Sequence.AminoAcidSet)">
            <summary>
            Create a sequence using the supplied character sequence, modifications, and amino acid set
            </summary>
            <param name="sequence"></param>
            <param name="modStr">E.g. Acetyl 0,Oxidation 1,Oxidation 20,Oxidation 27</param>
            <param name="aminoAcidSet"></param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Sequence.PrefixComposition">
            <summary>
            1-based: PrefixComposition[0] = Composition.Zero
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Sequence.Composition">
            <summary>
            Composition of the entire sequence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Sequence.Mass">
            <summary>
            Mass of the entire sequence
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetMass(System.Int32,System.Int32)">
            <summary>
            Get the mass from residue <paramref name="from"/> (inclusive) to residue <paramref name="to"/> (exclusive)
            </summary>
            <param name="from">inclusive</param>
            <param name="to">exclusive</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetComposition(System.Int32,System.Int32)">
            <summary>
            Get the composition from residue <paramref name="from"/> (inclusive) to residue <paramref name="to"/> (exclusive)
            </summary>
            <param name="from">inclusive</param>
            <param name="to">exclusive</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetInternalCleavages">
            <summary>
            Get the internal cleavages
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetPrefixCompositions">
            <summary>
            Get the prefix compositions
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetSuffixCompositions">
            <summary>
            Get the suffix compositions
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetPrecursorIon(System.Int32)">
            <summary>
            Get the precursor ion
            </summary>
            <param name="charge"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetProductIons(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.IonType})">
            <summary>
            Get the product ions of the specified types
            </summary>
            <param name="ionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Sequence.GetSequenceFromMsGfPlusPeptideStr(System.String)">
            <summary>
            Parse peptide string from MS-GF+ results
            </summary>
            <param name="msgfPlusPeptideStr">string of format "+229.163C+57.021GLGGSGTPVDELDK+229.163C+57.021C+57.021QTHDNC+57.021YDQAK+229.163"</param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.SequenceGraph">
            <summary>
            Creates a graph for scoring a sequence or annotation
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.CreateGraph(InformedProteomics.Backend.Data.Sequence.AminoAcidSet,System.String)">
            <summary>
            Create a graph representing the annotation. Annotation is reversed.
            </summary>
            <param name="aaSet">amino acid set</param>
            <param name="annotation">annotation (e.g. G.PEPTIDER.K or _.PEPTIDER._)</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.CreateGraph(InformedProteomics.Backend.Data.Sequence.AminoAcidSet,InformedProteomics.Backend.Data.Sequence.AminoAcid,System.String,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Create a graph representing the sequence. Sequence is reversed.
            </summary>
            <param name="aaSet">amino acid set</param>
            <param name="nTerm">N-term amino acid</param>
            <param name="sequence">sequence</param>
            <param name="cTerm">C-term amino acid</param>
            <returns>sequence graph</returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SequenceGraph.AminoAcidSet">
            <summary>
            Amino acid set used in the graph
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SequenceGraph.ModificationParams">
            <summary>
            Modifications used in this graph
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SequenceGraph.IsValid">
            <summary>
            If the sequence graph is valid
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.SequenceGraph.NumNTermCleavages">
            <summary>
            Number of N-Terminus cleavages
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoformCompositions">
            <summary>
            Gets the number of possible compositions of the current sequence
            </summary>
            <returns>the number of possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumDistinctSequenceCompositions">
            <summary>
            Gets the number of distinct compositions of the current sequence
            </summary>
            <returns>the number of possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetSequenceCompositions">
            <summary>
            Gets all possible compositions of the current sequence
            </summary>
            <returns>all possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoforms">
            <summary>
            Gets number of possible proteoforms
            </summary>
            <returns>number of possible proteoforms</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoformSequencesByNumMods(System.Int32)">
            <summary>
            Get the number of proteoform sequences possible with the provided number of dynamic modifications
            </summary>
            <param name="nDynMods"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumProteoformSequences(System.Int32)">
            <summary>
            Get number of possible proteoform sequences for the specified modification combination
            </summary>
            <param name="modIndex">index of modification combination</param>
            <returns>number of sequences</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.CleaveNTerm">
            <summary>
            Perform  N-Terminus cleavage on the sequence graph
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetModificationCombinations">
            <summary>
            Get the modification combinations in the current sequence graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetUnmodifiedSequenceComposition">
            <summary>
            Gets the composition of the sequence without variable modification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetNumFragmentCompositions">
            <summary>
            Gets the number of possible product compositions of the current sequence
            </summary>
            <returns>the number of possible product compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetAllFragmentNodeCompositions">
            <summary>
            Get the compositions of all fragment nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetFragmentCompositions(System.Int32,System.Int32)">
            <summary>
            Get the fragment compositions for the provided index and number of N-Terminus cleavages
            </summary>
            <param name="modIndex"></param>
            <param name="numNTermCleavages"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.SetSink(System.Int32)">
            <summary>
            Set the provided index as the sink
            </summary>
            <param name="modIndex"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetSinkSequenceCompositionWithH2O">
            <summary>
            Get the Sink sequence composition with H2O added
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetFragmentScore(InformedProteomics.Backend.Data.Spectrometry.IScorer)">
            <summary>
            Get the fragment score using the provided scorer
            </summary>
            <param name="scorer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetFragmentScoreAndModifications(InformedProteomics.Backend.Data.Spectrometry.IScorer)">
            <summary>
            Get the fragment score and string-format modifications of this sequence graph
            </summary>
            <param name="scorer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.#ctor(InformedProteomics.Backend.Data.Sequence.AminoAcidSet,InformedProteomics.Backend.Data.Sequence.AminoAcid,System.String,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Generate a sequence graph for the provided data
            </summary>
            <param name="aminoAcidSet"></param>
            <param name="nTerm"></param>
            <param name="sequence"></param>
            <param name="cTerm"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetComposition(System.Int32,System.Int32)">
            <summary>
            Get the composition at the provided sequence index and mod index
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetComplementaryComposition(System.Int32,System.Int32)">
            <summary>
            Get the complementary composition at the provided sequence index and mod index
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.GetFragmentScore(System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.IScorer,System.Nullable{System.Double}[][],System.Nullable{System.Double}[][])">
            <summary>
            Get the fragment score at the provided sequence index and mod index, using the provided scorer
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <param name="scorer"></param>
            <param name="nodeScore"></param>
            <param name="maxScore"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.SequenceGraph._maxSeqIndex">
            <summary>
            Max sequence index
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.SequenceGraph._graph">
            <summary>
            The sequence graph itself
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Sequence.SequenceGraph._sequence">
            <summary>
            The sequence being scored
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.SequenceGraph.PutAminoAcid(System.Int32,System.Char)">
            <summary>
            Add an amino acid residue to this generator.
            </summary>
            <param name="index">index to add the amino acid. 0 is C-term. 1 is the C-term amino acid.</param>
            <param name="residue">amino acid residue to add.</param>
            <returns>true if residue is a valid amino acid; false otherwise.</returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.Node">
            <summary>
            A node in the Sequence graph
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.Node.ModificationCombinationIndex">
            <summary>
            The index of the modification combination
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.Node.GetPrevNodeIndices">
            <summary>
            Get the indices of the previous nodes
            </summary>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph">
            <summary>
            A shifted mass sequence graph
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.#ctor(InformedProteomics.Backend.Data.Sequence.AminoAcidSet,System.Double,System.Boolean,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="aminoAcidSet"></param>
            <param name="shiftedMass"></param>
            <param name="isForward"></param>
            <param name="maxSequenceLength"></param>
            <param name="maxSequenceMass"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.AddAminoAcid(System.Char,InformedProteomics.Backend.Data.Enum.SequenceLocation)">
            <summary>
            Add an amino acid to this shifted sequence graph
            </summary>
            <param name="residue"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.AminoAcidSet">
            <summary>
            The amino acid set used in this shifted sequence graph
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.ModificationParams">
            <summary>
            Modifications used in this shifted sequence graph
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.ShiftMass">
            <summary>
            The mass by which this sequence graph is shifted
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.IsValid">
            <summary>
            If this shifted sequence graph is valid
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetSequenceCompositions">
            <summary>
            Gets all possible compositions of the current sequence
            </summary>
            <returns>all possible compositions</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetNumProteoforms">
            <summary>
            Gets number of possible proteoforms
            </summary>
            <returns>number of possible proteoforms</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.SetSink(System.Int32)">
            <summary>
            Set the sink to the provided modification index
            </summary>
            <param name="modIndex"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetSinkSequenceCompositionWithH2O">
            <summary>
            Get the sink sequence composition with H2O added
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetFragmentScore(InformedProteomics.Backend.Data.Spectrometry.IScorer)">
            <summary>
            Get the fragment score using the provided scorer
            </summary>
            <param name="scorer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetScoreAndModifications(InformedProteomics.Backend.Data.Spectrometry.IScorer)">
            <summary>
            Get the score and modifications
            </summary>
            <param name="scorer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetFragmentScoreAndModifications(System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.IScorer,System.Collections.Generic.IReadOnlyList{System.Nullable{System.Double}[]},System.Collections.Generic.IReadOnlyList{System.Tuple{System.Double,System.Collections.Generic.LinkedList{InformedProteomics.Backend.Data.Sequence.ModificationInstance}}[]})">
            <summary>
            Get the fragment score and modifications
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <param name="scorer"></param>
            <param name="nodeScore"></param>
            <param name="maxScoreAndMods"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetComposition(System.Int32,System.Int32)">
            <summary>
            Get the composition at the provided sequence index and mod index
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetComplementaryComposition(System.Int32,System.Int32)">
            <summary>
            Get the complementary composition at the provided sequence index and mod index
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.GetFragmentScore(System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.IScorer,System.Nullable{System.Double}[][],System.Nullable{System.Double}[][])">
            <summary>
            Get the fragment score at the provided sequence index and mod index, using the provided scorer
            </summary>
            <param name="seqIndex"></param>
            <param name="modIndex"></param>
            <param name="scorer"></param>
            <param name="nodeScore"></param>
            <param name="maxScore"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Sequence.ShiftedSequenceGraph.PutAminoAcid(System.Int32,System.Char,InformedProteomics.Backend.Data.Enum.SequenceLocation)">
            <summary>
            Add an amino acid residue to this generator.
            </summary>
            <param name="index">index to add the amino acid. 0 is C-term. 1 is the C-term amino acid.</param>
            <param name="residue">amino acid residue to add.</param>
            <param name="loc">location of the residue</param>
            <returns>true if residue is a valid amino acid; false otherwise.</returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer">
            <summary>
            Base class for fragment scorers
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.#ctor(InformedProteomics.Backend.Data.Spectrometry.Spectrum,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Int32,System.Int32,System.Double,InformedProteomics.Backend.Data.Spectrometry.ActivationMethod)">
            <summary>
            Constructor
            </summary>
            <param name="spec"></param>
            <param name="tol"></param>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="relativeIsotopeIntensityThreshold"></param>
            <param name="activationMethod"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.GetFragmentScore(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Sequence.AminoAcid,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Get the fragment score for the provided fragment compositions and residues
            </summary>
            <param name="prefixFragmentComposition"></param>
            <param name="suffixFragmentComposition"></param>
            <param name="nTerminalResidue"></param>
            <param name="cTerminalResidue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.GetMinMaxChargeRange(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Get the range of min and max charges for the fragment composition
            </summary>
            <param name="fragmentComposition"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.GetMinMaxChargeRange(System.Double)">
            <summary>
            Get the range of min and max charges for the provided fragment mass
            </summary>
            <param name="fragmentIonMostAbuMass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.FindMatchedPeaks(InformedProteomics.Backend.Data.Composition.Composition,System.Double,System.Double)">
            <summary>
            Find the peaks that match the provided composition
            </summary>
            <param name="fragmentComposition"></param>
            <param name="corrThreshold"></param>
            <param name="distThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.FindMostIntensePeak(InformedProteomics.Backend.Data.Composition.Composition,System.Double,System.Double,System.Int32@,System.Double@,System.Double@)">
            <summary>
            Find the highest-intensity peak that matches the provided fragment composition
            </summary>
            <param name="fragmentComposition"></param>
            <param name="corrThreshold"></param>
            <param name="distThreshold"></param>
            <param name="observedCharge"></param>
            <param name="envelopeCorr"></param>
            <param name="envelopeDist"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.GetDistCorr(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Peak[])">
            <summary>
            Get the Bhattacharyya distance and the Pearson correlation for the provided ion and peaks
            </summary>
            <param name="ion"></param>
            <param name="observedPeaks"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.Ms2Spectrum">
            <summary>
            The spectrum being scored
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.Tolerance">
            <summary>
            Tolerance used for scoring
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.MinProductCharge">
            <summary>
            Min charge used for scoring
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.MaxProductCharge">
            <summary>
            Max charge used for scoring
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.BaseIonTypes">
            <summary>
            Base Ion Types used in scoring
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.PrefixOffsetMass">
            <summary>
            The prefix offset mass
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.SuffixOffsetMass">
            <summary>
            the suffix offset mass
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.RelativeIsotopeIntensityThreshold">
            <summary>
            The relative isotope intensity threshold
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.BaseIonTypesCID">
            <summary>
            The default base ion types for different fragmentation methods
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.BaseIonTypesETD">
            <summary>
            The default base ion types for different fragmentation methods
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.AbstractFragmentScorer.BaseIonTypesUVPD">
            <summary>
            The default base ion types for different fragmentation methods
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod">
            <summary>
            Type of dissociation/activation supported/available in this program
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.CID">
            <summary>
            Collision-induced dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.ETD">
            <summary>
            Electron transfer dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.HCD">
            <summary>
            High-energy/beam-type collision induced dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.ECD">
            <summary>
            Electron capture dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.PQD">
            <summary>
            Pulsed q dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.UVPD">
            <summary>
            Ultraviolet photo dissociation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ActivationMethod.Unknown">
            <summary>
            Unknown activation method
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.BaseIonType">
            <summary>
            Base class for IonTypes
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.A">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.Ar">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.B">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.C">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.D">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.V">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.W">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.X">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.Xr">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.Y">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.YM1">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.Zr">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.Z">
            <summary>
            Default base ion types
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.AllBaseIonTypes">
            <summary>
            List of all base ion types
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.CompositionCalculator">
            <summary>
            Calculates the composition of the ion, with option amino acid
            </summary>
            <param name="aminoAcid"></param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.Symbol">
            <summary>
            Ion symbol
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.IsPrefix">
            <summary>
            If the ion is a prefix ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.OffsetComposition">
            <summary>
            The offset this ion adds to a composition
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.GetDeconvolutedIon">
            <summary>
            Gets the deconvoluted version of this ion
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.BaseIonType.GetPossibleCompositions(InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Get possible compositions of this ion
            </summary>
            <param name="residue"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak">
            <summary>
            Deconvoluted peak class
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,InformedProteomics.Backend.Data.Spectrometry.Peak[])">
            <summary>
            Constructor
            </summary>
            <param name="mass"></param>
            <param name="intensity"></param>
            <param name="charge"></param>
            <param name="corr"></param>
            <param name="dist"></param>
            <param name="isotopePeaks"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.#ctor(InformedProteomics.Backend.Data.Spectrometry.Peak,System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="mzPeak"></param>
            <param name="charge"></param>
            <param name="corr"></param>
            <param name="dist"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.SummedIntensity">
            <summary>
            Get the summed intensity of the deconvoluted peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.MzWithoutAdductIonMass">
            <summary>
            Get the m/z without the adduct ion mass
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.Mass">
            <summary>
            Get the mass (m/z) of the deconvoluted peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.Charge">
            <summary>
            Get the charge of the deconvoluted peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.Corr">
            <summary>
            Get the Pearson Correlation of the deconvoluted peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.Dist">
            <summary>
            Get the Bhattacharyya distance of the deconvoluted peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeaks">
            <summary>
            Observed peaks of this deconvoluted peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeakIndices">
            <summary>
            Used for retrieving Observed peaks when reading from a .dpbf file, in conjunction with a .pbf file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.SetObservedPeaksFromSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum)">
            <summary>
            Uses the peaks in spec to find and set the <see cref="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeaks"/> according to the indices in <see cref="P:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak.ObservedPeakIndices"/>
            </summary>
            <param name="spec"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedSpectrum">
            <summary>
            Deconvoluted spectrum
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedSpectrum.#ctor(InformedProteomics.Backend.Data.Spectrometry.Spectrum,System.Collections.Generic.IReadOnlyList{InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak})">
            <summary>
            Constructor
            </summary>
            <param name="originalSpec"></param>
            <param name="peaks"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedSpectrum.#ctor(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="peaks"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedSpectrum.FindPeak(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Get the peak that matches <paramref name="composition"/> and <paramref name="tolerance"/>
            </summary>
            <param name="composition"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.DeconvolutedSpectrum.StorePeaks(System.Collections.Generic.IReadOnlyList{InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak})">
            <summary>
            Store the peaks in the Peaks, assuring that each peak is an instance of DeconvolutedPeak
            </summary>
            <param name="peaks"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter">
            <summary>
            Deconvolution class
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.MaxMass">
            <summary>
            Largest mass that will be deconvoluted
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.#ctor(System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="isotopeOffsetTolerance"></param>
            <param name="tolerance"></param>
            <param name="corrScoreThreshold"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.#ctor(System.Int32,System.Int32,System.Int32,System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="isotopeOffsetTolerance"></param>
            <param name="filteringWindowSize"></param>
            <param name="tolerance"></param>
            <param name="corrScoreThreshold"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.GetCombinedDeconvolutedSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum)">
            <summary>
            Get a deconvoluted spectrum that combines multiple charge states
            </summary>
            <param name="spectrum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.GetDeconvolutedSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum,System.Int32,System.Int32,System.Int32,System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Get the deconvoluted spectrum
            </summary>
            <param name="spec"></param>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="isotopeOffsetTolerance"></param>
            <param name="filteringWindowSize"></param>
            <param name="tolerance"></param>
            <param name="corrScoreThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.GetCombinedDeconvolutedSpectrum(InformedProteomics.Backend.Data.Spectrometry.Spectrum,System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Get a deconvoluted spectrum that combines multiple charge states
            </summary>
            <param name="spectrum"></param>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="isotopeOffsetTolerance"></param>
            <param name="tolerance"></param>
            <param name="corrScoreThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.GetDeconvolutedPeaks_new(InformedProteomics.Backend.Data.Spectrometry.Peak[],System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Get the deconvoluted peaks that correspond to the provided peak list
            </summary>
            <param name="peaks"></param>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="isotopeOffsetTolerance"></param>
            <param name="tolerance"></param>
            <param name="corrScoreThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.GetDeconvolutedPeaks(System.Int32,InformedProteomics.Backend.Data.Spectrometry.Peak[],System.Int32,System.Int32,System.Int32,System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Get the deconvoluted peaks, selecting the best peak within +/- filteringWindowSize
            </summary>
            <param name="scanNum">Scan number (included in any exceptions that are caught)</param>
            <param name="peaks"></param>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
            <param name="isotopeOffsetTolerance"></param>
            <param name="filteringWindowSize"></param>
            <param name="tolerance"></param>
            <param name="corrScoreThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Deconvoluter.FilterOut(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.DeconvolutedPeak},System.Double,System.Int32)">
            <summary>
            Filters out some data based on parameters, maybe?
            </summary>
            <param name="peaks"></param>
            <param name="windowSize"></param>
            <param name="topRankCutoff"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Fragment">
            <summary>
            A fragment of a sequence
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ionSymbol"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.ChargeState">
            <summary>
            The charge state of the fragment.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.Mz">
            <summary>
            The m/z of the fragment.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.Mass">
            <summary>
            The mass of the fragment.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.IonType">
            <summary>
            If this fragment is y6, the FragmentIonClassBase is y
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.ResidueNumber">
            <summary>
            The index of the residue this fragment breaks the peptide at.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Fragment.IonSymbol">
            <summary>
            The full ion symbol of the fragment. e.g. y6 or y6++ or y6-H2O++
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.Equals(InformedProteomics.Backend.Data.Spectrometry.Fragment)">
            <summary>
            Check if 2 fragments are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.op_Equality(InformedProteomics.Backend.Data.Spectrometry.Fragment,InformedProteomics.Backend.Data.Spectrometry.Fragment)">
            <summary>
            Overloaded equality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.op_Inequality(InformedProteomics.Backend.Data.Spectrometry.Fragment,InformedProteomics.Backend.Data.Spectrometry.Fragment)">
            <summary>
            Overloaded inequality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Fragment.ToString">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IDeconvolutedSpectrum">
            <summary>
            Interface for deconvoluted spectra
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IDeconvolutedSpectrum.FindPeak(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Get the peak that matches <paramref name="composition"/> and <paramref name="tolerance"/>
            </summary>
            <param name="composition"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IFragmentScorerFactory">
            <summary>
            Interface for Fragment scorer factories
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IFragmentScorerFactory.GetScorer(InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum,System.Double,System.Int32,InformedProteomics.Backend.Data.Spectrometry.ActivationMethod)">
            <summary>
            Get a scorer for the provided spectrum
            </summary>
            <param name="spectrum"></param>
            <param name="precursorMass"></param>
            <param name="precursorCharge"></param>
            <param name="activationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IFragmentScorerFactory.GetScorer(System.Int32,System.Double,System.Int32,InformedProteomics.Backend.Data.Spectrometry.ActivationMethod)">
            <summary>
            Get a scorer for the provided scan number
            </summary>
            <param name="scanNum"></param>
            <param name="precursorMass"></param>
            <param name="precursorCharge"></param>
            <param name="activationMethod"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IonType">
            <summary>
            Ion Type
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.Name">
            <summary>
            Name of ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.Mass">
            <summary>
            Mass of ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.OffsetComposition">
            <summary>
            Offset composition of the ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.Charge">
            <summary>
            Ion charge
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.IsPrefixIon">
            <summary>
            If the ion is a prefix ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.BaseIonType">
            <summary>
            BaseIonType of ion
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IonType.NeutralLoss">
            <summary>
            Ion neutral loss
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.#ctor(System.String,InformedProteomics.Backend.Data.Composition.Composition,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="offsetComposition"></param>
            <param name="charge"></param>
            <param name="isPrefixIon"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetMz(System.Double)">
            <summary>
            Get the m/z of <paramref name="cutMass"/> + (the offset mass)
            </summary>
            <param name="cutMass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetMz(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Get the m/z of <paramref name="prefixComposition"/> + (the offset composition)
            </summary>
            <param name="prefixComposition"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetIon(InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Get the Ion with the cutComposition added
            </summary>
            <param name="cutComposition"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetPossibleIons(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Get possible ions for <paramref name="cutComposition"/> and <paramref name="terminalResidue"/>
            </summary>
            <param name="cutComposition"></param>
            <param name="terminalResidue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetPossibleIons(InformedProteomics.Backend.Data.Sequence.Sequence)">
            <summary>
            Get possible ions for <paramref name="sequence"/>
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.ToString">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetName(System.Int32)">
            <summary>
            Returns ion name with ion index (e.g. y++4-H2O => charge 2 y4 - H2O)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.Parse(System.String)">
            <summary>
            Parse an ion from string <paramref name="s"/>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.Equals(InformedProteomics.Backend.Data.Spectrometry.IonType)">
            <summary>
            Check for equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory">
            <summary>
            Factory for creating Ion types
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="removeRedundantIonTypes"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxCharge"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.#ctor(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.BaseIonType},System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.NeutralLoss},System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="baseIons"></param>
            <param name="neutralLosses"></param>
            <param name="maxCharge"></param>
            <param name="removeRedundantIonTypes"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.GetDeconvolutedIonTypeFactory(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.BaseIonType},System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.NeutralLoss})">
            <summary>
            Get a <see cref="T:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory"/> for the deconvoluted versions of <paramref name="baseIons"/> and <paramref name="neutralLosses"/>
            </summary>
            <param name="baseIons"></param>
            <param name="neutralLosses"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.GetIonType(System.String)">
            <summary>
            Get an ion type by name, e.g. y2-NH3
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.GetIonType(InformedProteomics.Backend.Data.Spectrometry.BaseIonType,System.Int32,InformedProteomics.Backend.Data.Spectrometry.NeutralLoss)">
            <summary>
            Get ion type according to the parameters
            </summary>
            <param name="baseIonType"></param>
            <param name="charge"></param>
            <param name="neutralLoss"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.GetIonTypesFromDecharged(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.Data.Spectrometry.IonType},System.Int32)">
            <summary>
            Given a list of IonTypes of charge 1 and a charge value, a list of the same IonTypes of charge up to and
            including charge are outputted.
            </summary>
            <param name="ionTypes">List of IonTypes of charge 1</param>
            <param name="charge">IonTypes of charge up to and including charge will be outputted</param>
            <returns>List of charged IonTypes</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IonTypeFactory.GetAllKnownIonTypes">
            <summary>
            Get all known ion types
            </summary>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IScorer">
            <summary>
            Interface for Scorers
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IScorer.GetFragmentScore(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Sequence.AminoAcid,InformedProteomics.Backend.Data.Sequence.AminoAcid)">
            <summary>
            Get the fragment score for the provided data
            </summary>
            <param name="prefixFragmentComposition"></param>
            <param name="suffixFragmentComposition"></param>
            <param name="nTerminalResidue"></param>
            <param name="cTerminalResidue"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ISequenceFilter">
            <summary>
            Interface for Sequence filters
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ISequenceFilter.GetMatchingMs2ScanNums(System.Double)">
            <summary>
            Get MS2 scans that have a precursor mass that matches <paramref name="sequenceMass"/>
            </summary>
            <param name="sequenceMass"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow">
            <summary>
            MS2 spectrum isolation window data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.#ctor(System.Double,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="isolationWindowTargetMz"></param>
            <param name="isolationWindowLowerOffset"></param>
            <param name="isolationWindowUpperOffset"></param>
            <param name="monoisotopicMz"></param>
            <param name="charge"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.IsolationWindowTargetMz">
            <summary>
            Target m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.IsolationWindowLowerOffset">
            <summary>
            Lower mass offset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.IsolationWindowUpperOffset">
            <summary>
            Upper mass offset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.MonoisotopicMz">
            <summary>
            Precursor Monoisotopic m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.Charge">
            <summary>
            Precursor Charge
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.MinMz">
            <summary>
            Lower mass
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.MaxMz">
            <summary>
            Upper mass
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.Width">
            <summary>
            Isolation window width
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.MonoisotopicMass">
            <summary>
            Monoisotopic mass
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.Contains(System.Double)">
            <summary>
            True of the mz is within the isolation window
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.Equals(InformedProteomics.Backend.Data.Spectrometry.IsolationWindow)">
            <summary>
            Object equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.CompareTo(InformedProteomics.Backend.Data.Spectrometry.IsolationWindow)">
            <summary>
            Comparer for sorting, orders by Target m/z
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IsolationWindow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Isotope">
            <summary>
            Isotope
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Isotope.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
            <param name="ratio"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Isotope.Index">
            <summary>
            Isotope index
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Isotope.Ratio">
            <summary>
            Isotope ratio
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Isotope.CompareTo(InformedProteomics.Backend.Data.Spectrometry.Isotope)">
            <summary>
            Compare two isotopes by Index
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Isotope.ToString">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap">
            <summary>
            Charge map for LC-MS data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap.#ctor(InformedProteomics.Backend.MassSpecData.LcMsRun,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="run"></param>
            <param name="tolerance"></param>
            <param name="maxNumMs2ScansPerMass"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap.GetMatchingFeatureIds(System.Double)">
            <summary>
            Get feature ids of features that match the sequence mass
            </summary>
            <param name="sequenceMass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap.GetMatchingMs2ScanNums(System.Double)">
            <summary>
            Get MS2 scan numbers that have precursors that match the sequence mass
            </summary>
            <param name="sequenceMass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap.GetMatchingMass(System.Int32)">
            <summary>
            Get the mass matching the scan number
            </summary>
            <param name="ms2ScanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap.CreateMassToScanNumMap">
            <summary>
            Create the mass to scan number map
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsChargeMap.SetMatches(System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the matches
            </summary>
            <param name="featureId"></param>
            <param name="monoIsotopicMass"></param>
            <param name="minScanNum"></param>
            <param name="maxScanNum"></param>
            <param name="repScanNum"></param>
            <param name="minCharge"></param>
            <param name="maxCharge"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap">
            <summary>
            LC-MS spectrum and sequence matches
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap.GetMatchingMs2ScanNums(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,InformedProteomics.Backend.MassSpecData.LcMsRun)">
            <summary>
            Get the MS2 scan numbers that match the sequence mass
            </summary>
            <param name="sequenceMass"></param>
            <param name="tolerance"></param>
            <param name="run"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap.CreateSequenceMassToMs2ScansMap(InformedProteomics.Backend.MassSpecData.LcMsRun,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double,System.Double)">
            <summary>
            Create a map of sequence masses and MS2 scans
            </summary>
            <param name="run"></param>
            <param name="tolerance"></param>
            <param name="minMass"></param>
            <param name="maxMass"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap.SetMatches(System.Double,System.Int32,System.Int32)">
            <summary>
            Set the matches
            </summary>
            <param name="monoIsotopicMass"></param>
            <param name="minScanNum"></param>
            <param name="maxScanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap.GetBinNumber(System.Double)">
            <summary>
            Get the bin number for the provided mass
            </summary>
            <param name="mass"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsMatchMap.GetMass(System.Int32)">
            <summary>
            Get the mass for the provided bin number
            </summary>
            <param name="binNum"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.LcMsPeak">
            <summary>
            LcMsPeak: like <see cref="T:InformedProteomics.Backend.Data.Spectrometry.Peak"/>, but with a scan number
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsPeak.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mz"></param>
            <param name="intensity"></param>
            <param name="scanNum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcMsPeak.ScanNum">
            <summary>
            Scan number where peak was observed
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcMsPeak.CompareTo(InformedProteomics.Backend.Data.Spectrometry.LcMsPeak)">
            <summary>
            Compare 2 LcMsPeaks (for sorting)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter">
            <summary>
            Implementation of a deconvoluter that can be used to create a deconvoluted implementation of <see cref="T:InformedProteomics.Backend.MassSpecData.LcMsRun"/>
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.dataReader">
            <summary>
            MassSpec data reader to read raw spectra from.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.deconvoluter">
            <summary>
            Spectrum deconvoluter.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.msLevelSet">
            <summary>
            The MS levels (ex MS1, MS2, etc) to extract spectra for.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.maxDegreeOfParallelism">
            <summary>
            The maximum number of threads the deconvoluter can use.
            </summary>
            <remarks>
            If -1, the system will decide the max thread count
            Otherwise, must be 1 or larger
            </remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.#ctor(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,InformedProteomics.Backend.Data.Spectrometry.Deconvoluter,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter" /> class.
            This constructor creates an instance with multiple MSLevels for default (MS1 and MS2).
            </summary>
            <param name="dataReader">MassSpec data reader to read raw spectra from.</param>
            <param name="deconvoluter">Spectrum deconvoluter.</param>
            <param name="msLevels">The MS levels (ex MS1, MS2, etc) to extract spectra for.</param>
            <param name="maxDegreeOfParallelism">The maximum number of threads the deconvoluter can use.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.#ctor(InformedProteomics.Backend.MassSpecData.IMassSpecDataReader,InformedProteomics.Backend.Data.Spectrometry.Deconvoluter,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter" /> class.
            This constructor creates an instance with a single MSLevel
            </summary>
            <param name="dataReader">MassSpec data reader to read raw spectra from.</param>
            <param name="deconvoluter">Spectrum deconvoluter.</param>
            <param name="msLevel">The MS level (ex MS1, MS2, etc) to extract spectra for.</param>
            <param name="maxDegreeOfParallelism">The maximum number of threads the deconvoluter can use.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.ReadAllSpectra(System.Boolean)">
            <summary>
            Gets all spectra.
            Deconvolutes spectra in parallel as it reads them.
            </summary>
            <param name="includePeaks">Ignored</param>
            <returns>Deconvoluted spectra.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number and deconvolutes it.
            </summary>
            <param name="scanNum">The scan to deconvolute.</param>
            <param name="includePeaks">Should it be deconvoluted?</param>
            <returns>Deconvoluted spectrum.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Read the specified spectrum from the file, optionally reading only the metadata
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.NumSpectra">
            <summary>
            Gets the number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.Close">
            <summary>
            Close the reader.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.Dispose">
            <summary>
            Cleans up the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.LcmsRunDeconvoluter.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Ms2DetectorType">
            <summary>
            Types of MS2 ion detectors
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Ms2DetectorType.IonTrap">
            <summary>
            Ion trap
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Ms2DetectorType.Orbitrap">
            <summary>
            Thermo Orbitrap
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Ms2DetectorType.Fticr">
            <summary>
            FTICR
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Ms2DetectorType.Tof">
            <summary>
            Time-of-flight
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss">
            <summary>
            Neutral loss
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.#ctor(System.String,System.String,InformedProteomics.Backend.Data.Composition.Composition)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="symbol"></param>
            <param name="composition"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.Symbol">
            <summary>
            Symbol for the type of neutral loss
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.Name">
            <summary>
            Name of the neutral loss type
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.Composition">
            <summary>
            Neutral loss composition
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.NoLoss">
            <summary>
            No neutral loss
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.H2O">
            <summary>
            Neutral water loss
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.NH3">
            <summary>
            Neutral ammonia loss
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.NeutralLoss.CommonNeutralLosses">
            <summary>
            List of common neutral losses
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Peak">
            <summary>
            Peak data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="mz"></param>
            <param name="intensity"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Peak.Mz">
            <summary>
            Peak m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Peak.Intensity">
            <summary>
            Peak intensity
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.CompareTo(InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Compare 2 peaks (for sorting by m/z)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.Equals(InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Test 2 peaks for equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.op_Equality(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Overloaded equality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Peak.op_Inequality(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Overloaded inequality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.IntensityComparer">
            <summary>
            Sort by reverse order of intensities (highest intensity comes first)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.IntensityComparer.Compare(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Compare 2 peaks by intensity
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance">
            <summary>
            Compare by m/z. Two peaks within ppmTolerance are considered to be equal.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance.#ctor(InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Constructor
            </summary>
            <param name="tolerance"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="ppmTolerance"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance.Compare(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Compare 2 peaks by m/z with a tolerance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance.Equals(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Test 2 peaks for m/z equality, within a tolerance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithTolerance.GetHashCode(InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithPpmTolerance">
            <summary>
            Compare by m/z. Two peaks within ppmTolerance are considered to be equal.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithPpmTolerance.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="ppmTolerance"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithPpmTolerance.Equals(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Test 2 peaks for m/z equality, within a tolerance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithToleranceMz">
            <summary>
            Compare by m/z. Two peaks within toleranceTh Th are considered to be equal.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithToleranceMz.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="toleranceTh"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithToleranceMz.Equals(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Test 2 peaks for m/z equality, within a tolerance
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithToleranceMz.GetHashCode(InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning">
            <summary>
            Compare by m/z. Two peaks within ppmTolerance are considered to be equal.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.#ctor(System.Int32)">
            <summary>
            Constructor: 27 bits: max error = 16 ppm, 28 bits (8 ppm), 26 bits (32 ppm)
            </summary>
            <param name="numBits"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.Equals(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Check if 2 peaks are in the same m/z bin
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.Equals(System.Double,System.Double)">
            <summary>
            Check if 2 masses are in the same m/z bin
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetHashCode(InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.Compare(InformedProteomics.Backend.Data.Spectrometry.Peak,InformedProteomics.Backend.Data.Spectrometry.Peak)">
            <summary>
            Compare 2 peaks by m/z bin
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetRoundedValue(System.Double)">
            <summary>
            Get the m/z rounded by <see cref="F:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.NumBits"/> using bit shifting magic
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetBinNumber(System.Double)">
            <summary>
            Get the bin number for the m/z
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetMzStart(System.Int32)">
            <summary>
            Get the lowest m/z value in bin <paramref name="binNum"/>, inclusive
            </summary>
            <param name="binNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetMzEnd(System.Int32)">
            <summary>
            Get the highest m/z value in bin <paramref name="binNum"/>, exclusive
            </summary>
            <param name="binNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetMzAverage(System.Int32)">
            <summary>
            Get average m/z for bin <paramref name="binNum"/>
            </summary>
            <param name="binNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.GetTolerance">
            <summary>
            Get the ppm tolerance that corresponds to <see cref="F:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.NumBits"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.Ppm">
            <summary>
            Get the ppm tolerance that corresponds to <see cref="F:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.NumBits"/>
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.MzComparerWithBinning.NumBits">
            <summary>
            Number of bits to use for binning
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed">
            <summary>
            Like <see cref="T:InformedProteomics.Backend.Data.Spectrometry.Peak"/>, but with additional per-peak data, like the Noise value available from Thermo Label data.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="mz"></param>
            <param name="intensity"></param>
            <param name="noise"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed.Noise">
            <summary>
            Noise value for the peak
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed.SignalToNoise">
            <summary>
            Calculated SignalToNoise value
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.PeptideSpectrumMatch">
            <summary>
            Peptide spectrum match data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.PeptideSpectrumMatch.#ctor(InformedProteomics.Backend.Data.Sequence.Sequence,InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum)">
            <summary>
            Constructor
            </summary>
            <param name="peptide"></param>
            <param name="spectrum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.PeptideSpectrumMatch.Peptide">
            <summary>
            Peptide sequence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.PeptideSpectrumMatch.Spectrum">
            <summary>
            Spectrum that matches <see cref="P:InformedProteomics.Backend.Data.Spectrometry.PeptideSpectrumMatch.Peptide"/>
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum">
            <summary>
            Class for hold MSn (product) spectrum information
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mzArr"></param>
            <param name="intensityArr"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.#ctor(System.Collections.Generic.ICollection{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="peaks"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.ActivationMethod">
            <summary>
            Activation Method
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.IsolationWindow">
            <summary>
            Isolation Window
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.ProductSpectrum.SetMsLevel(System.Int32)">
            <summary>
            Set the MS Level
            </summary>
            <param name="msLevel"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Protocol">
            <summary>
            Training protocol options
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Protocol.Standard">
            <summary>
            Standard protocol
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Protocol.Phosphorylation">
            <summary>
            Phosporylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Protocol.Itraq">
            <summary>
            iTRAQ Label reagents
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Protocol.ItraqPhospho">
            <summary>
            iTRAQ Label reagents with phosphorylation
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Protocol.Tmt">
            <summary>
            TMT Label reagents
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Spectrum">
            <summary>
            Class to hold information about a single Spectrum
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mzArr"></param>
            <param name="intensityArr"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.#ctor(System.Collections.Generic.ICollection{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="peaks"></param>
            <param name="scanNum"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="scanNum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.ScanNum">
            <summary>
            Scan Number
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.NativeId">
            <summary>
            Native ID
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.TotalIonCurrent">
            <summary>
            Total Ion Current
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.MsLevel">
            <summary>
            MS Level
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.ElutionTime">
            <summary>
            Elution time (minutes)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.Spectrum.Peaks">
            <summary>
            Peaks
            </summary>
            <remarks>Peaks are assumed to be sorted according to m/z</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FindPeak(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Finds the maximum intensity peak within the specified range
            </summary>
            <param name="mz">m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>maximum intensity peak</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetPeakListWithin(System.Double,System.Double)">
            <summary>
            Gets a list of peaks within [minMz, maxMz]
            </summary>
            <param name="minMz">minimum m/z</param>
            <param name="maxMz">maximum m/z</param>
            <returns>list of peaks within [minMz, maxMz]</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetPeakListWithin(System.Double,System.Double,System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak}@)">
            <summary>
            Gets a list of peaks within [minMz, maxMz] and add to peakList
            </summary>
            <param name="minMz">minimum m/z</param>
            <param name="maxMz">maximum m/z</param>
            <param name="peakList">list of peaks where the peaks will be added</param>
            <returns>list of peaks within [minMz, maxMz]</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.ContainsIon(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Checks whether this spectrum contains all isotope peaks whose relative intensity is equal or larger than the threshold
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>true if spectrum contains all ions; false otherwise.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetAllIsotopePeaks(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Finds all isotope peaks corresponding to theoretical profiles with relative intensity higher than the threshold
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>array of observed isotope peaks in the spectrum. null if no peak found.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetAllIsotopePeaks(System.Double,System.Int32,InformedProteomics.Backend.Data.Composition.IsotopomerEnvelope,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Get all isotope peaks that correspond to <paramref name="monoIsotopeMass"/>, <paramref name="charge"/>, <paramref name="envelope"/>, and <paramref name="tolerance"/>
            </summary>
            <param name="monoIsotopeMass"></param>
            <param name="charge"></param>
            <param name="envelope"></param>
            <param name="tolerance"></param>
            <param name="relativeIntensityThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetCorrScore(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Computes the Pearson correlation between the ion and corresponding peaks in the spectrum
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>Pearson correlation</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetFitScore(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Computes the fit score between the ion and corresponding peaks in the spectrum
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>fit score</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetCosineScore(InformedProteomics.Backend.Data.Biology.Ion,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Computes the cosine between the ion and corresponding peaks in the spectrum
            </summary>
            <param name="ion">ion</param>
            <param name="tolerance">tolerance</param>
            <param name="relativeIntensityThreshold">relative intensity threshold of the theoretical isotope profile</param>
            <returns>cosine value</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FindPeak(System.Double,System.Double)">
            <summary>
            Finds the maximum intensity peak within the specified range
            </summary>
            <param name="minMz">minimum m/z</param>
            <param name="maxMz">maximum m/z</param>
            <returns>maximum intensity peak within the range</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.Display(System.Int32)">
            <summary>
            Write the spectrum to standard output
            </summary>
            <param name="maxPointsToShow"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FilterNoiseWithPeakNoiseInfo(System.Double)">
            <summary>
            Filter noise peaks out of the spectrum: requires use of <see cref="T:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed"/> with populated noise values.
            Any non-<see cref="T:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed"/> peaks will be assumed good.
            If no <see cref="T:InformedProteomics.Backend.Data.Spectrometry.PeakDetailed"/> peaks, <see cref="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FilterNoise(System.Double)"/> is called internally.
            </summary>
            <param name="signalToNoiseRatio"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FilterNoise(System.Double)">
            <summary>
            Filter noise peaks out of the spectrum using a basic signal-to-noise calculation
            </summary>
            <param name="signalToNoiseRatio"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FilterNoiseByLocalWindow(System.Double,System.Int32)">
            <summary>
            Filter noise peaks out using a local window
            </summary>
            <param name="signalToNoiseRatio"></param>
            <param name="windowPpm"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetMostAbundantIntensity(System.Int32,System.Int32)">
            <summary>
            Get the most abundant intensity in the index range provided
            </summary>
            <param name="peakStartIndex"></param>
            <param name="peakEndIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FilterNoiseByIntensityHistogram">
            <summary>
            Filter noise peaks out using an intensity histogram
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FilterNoiseBySlope(System.Double)">
            <summary>
            Filter noise peaks out using peak slope
            </summary>
            <param name="slopeThreshold"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetFilteredSpectrumBySignalToNoiseRatio(System.Double)">
            <summary>
            Get a spectrum where the peaks have been filtered by the signal to noise ratio
            </summary>
            <param name="signalToNoiseRatio"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetFilteredSpectrumBySlope(System.Double)">
            <summary>
            Get a spectrum where the peaks have been filtered by the slope
            </summary>
            <param name="slopeThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.GetFilteredSpectrumByLocalWindow(System.Double,System.Int32)">
            <summary>
            Get a spectrum where the peaks have been filtered by the local window
            </summary>
            <param name="signalToNoiseRatio"></param>
            <param name="windowPpm"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FindPeakIndex(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Find the index of the peak that matches the m/z and tolerance
            </summary>
            <param name="mz"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Spectrum.FindPeakIndex(System.Double,System.Double)">
            <summary>
            Find the index of the peak that falls within <paramref name="minMz"/> and <paramref name="maxMz"/>
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.SummedSpectrum">
            <summary>
            Summd spectrum
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.SummedSpectrum.#ctor(System.Collections.Generic.ICollection{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="peaks"></param>
            <param name="scanNum"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.SummedSpectrum.ScanNums">
            <summary>
            Scan numbers that were summed to make this <see cref="T:InformedProteomics.Backend.Data.Spectrometry.SummedSpectrum"/>
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum">
            <summary>
            This class exists to do a single targeted, single ion deconvolution of a non-deconvoluted spectrum.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum.spectrum">
            <summary>
            Non-deconvoluted spectrum.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum.minCharge">
            <summary>
            The minimum charge state to consider.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum.maxCharge">
            <summary>
            The maximum charge state to consider.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum.#ctor(InformedProteomics.Backend.Data.Spectrometry.Spectrum,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum" /> class.
            </summary>
            <param name="spectrum">Non-deconvoluted spectrum.</param>
            <param name="minCharge">The minimum charge state to consider.</param>
            <param name="maxCharge">The maximum charge state to consider.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum.FindPeak(InformedProteomics.Backend.Data.Composition.Composition,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Find a neutral monoisotopic peak corresponding to a single compound
            </summary>
            <param name="composition">The compound to look for.</param>
            <param name="tolerance">The peak tolerance to use.</param>
            <returns>The neutral monoisotopic peak.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.TargetedDeconvolutedSpectrum.GetCorrCos(InformedProteomics.Backend.Data.Biology.Ion,System.Collections.Generic.IReadOnlyList{InformedProteomics.Backend.Data.Spectrometry.Peak})">
            <summary>
            Gets the pearson correlation and cosine score of an observed isotopic distribution compared to a theoretical ion.
            </summary>
            <param name="ion">Theoretical ion.</param>
            <param name="observedPeaks">The observed isotopic distribution.</param>
            <returns>A tuple where the first item is pearson correlation and the second item is cosine.</returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Tolerance">
            <summary>
            Facilitates working with mass spec measurement tolerances
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.Tolerance.OnePpm">
            <summary>
            Constant tolerance object for 1 PPM
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.#ctor(System.Double)">
            <summary>
            Instantiate a tolerance with the supplied value and PPM units
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.#ctor(System.Double,InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit)">
            <summary>
            Instantiate a tolerance with the supplied value and units
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetValue">
            <summary>
            Get the tolerance value for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetUnit">
            <summary>
            Get the tolerance unit set for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetToleranceAsMz(System.Double)">
            <summary>
            Get the tolerance limit in terms of m/z for the supplied mass
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetToleranceAsTh(System.Double)">
            <summary>
            Get the tolerance limit in terms of Thomsons (m/z) for the supplied mass
            </summary>
            <param name="mz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.GetToleranceAsDa(System.Double,System.Int32)">
            <summary>
            Get the tolerance limit in terms of Daltons for the supplied mass and charge
            </summary>
            <param name="mz"></param>
            <param name="charge"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.IsWithin(System.Double,System.Double)">
            <summary>
            Test the supplied m/z values to see if they are within the tolerance limits in this instance
            </summary>
            <param name="mz1"></param>
            <param name="mz2"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.ToString">
            <summary>
            Return the string representation of this tolerance
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Tolerance.Parse(System.String)">
            <summary>
            Return a tolerance object that was created using the data from the supplied string
            </summary>
            <param name="tolStr"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit">
            <summary>
            Units used for tolerance
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Ppm">
            <summary>
            Parts per million
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Da">
            <summary>
            Daltons
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Mz">
            <summary>
            m/z
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.Data.Spectrometry.ToleranceUnit.Th">
            <summary>
            Thomsons (m/z)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.Xic">
            <summary>
            Extracted Ion Chromatogram
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetCorrelation(InformedProteomics.Backend.Data.Spectrometry.Xic)">
            <summary>
            Get the Pearson correlation of 2 XICs
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetCosine(InformedProteomics.Backend.Data.Spectrometry.Xic)">
            <summary>
            Get the Cosine score of 2 XICs
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetSumIntensities">
            <summary>
            Get the sum of the intensities in the XIC
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.ContainsScanNum(System.Int32)">
            <summary>
            Check if this XIC contains data in scan <paramref name="scanNum"/>
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetApexScanNum">
            <summary>
            Get the scan number of the highest-intensity peak in this XIC
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetNearestApexScanNum(System.Int32,System.Boolean)">
            <summary>
            Get the nearest intensity peak to the provided scan number
            </summary>
            <param name="scanNumber"></param>
            <param name="performSmoothing"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.Display(System.Int32)">
            <summary>
            Display the chromatogram
            </summary>
            <param name="maxPointsToShow">Maximum number of data points to show</param>
            <remarks>Set maxPoints to 0 to see all of the data points</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetSelectedXic(InformedProteomics.Backend.Data.Spectrometry.Xic)">
            <summary>
            Sort XicPoints and select one peak per scan
            </summary>
            <param name="xic"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.Equals(InformedProteomics.Backend.Data.Spectrometry.Xic)">
            <summary>
            Check 2 XICs for equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.Xic.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:InformedProteomics.Backend.Data.Spectrometry.XicPoint">
            <summary>
            A peak in an XIC
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="scanNum"></param>
            <param name="mz"></param>
            <param name="intensity"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.#ctor(InformedProteomics.Backend.Data.Spectrometry.LcMsPeak)">
            <summary>
            Constructor
            </summary>
            <param name="peak"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.XicPoint.ScanNum">
            <summary>
            Peak scan number
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.XicPoint.Mz">
            <summary>
            Peak m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Data.Spectrometry.XicPoint.Intensity">
            <summary>
            Peak intensity
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.CompareTo(InformedProteomics.Backend.Data.Spectrometry.XicPoint)">
            <summary>
            Compare 2 XicPoints
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.Equals(InformedProteomics.Backend.Data.Spectrometry.XicPoint)">
            <summary>
            Check 2 XicPoints for equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.ToString">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.op_Equality(InformedProteomics.Backend.Data.Spectrometry.XicPoint,InformedProteomics.Backend.Data.Spectrometry.XicPoint)">
            <summary>
            Overloaded equality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Data.Spectrometry.XicPoint.op_Inequality(InformedProteomics.Backend.Data.Spectrometry.XicPoint,InformedProteomics.Backend.Data.Spectrometry.XicPoint)">
            <summary>
            Overloaded inequality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry">
            <summary>
            Data that is written to a ms1ft file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.FeatureId">
            <summary>
            Feature ID
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MinScan">
            <summary>
            The first scan containing the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MaxScan">
            <summary>
            The last scan containing the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MinCharge">
            <summary>
            The minimum charge seen for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MaxCharge">
            <summary>
            The maximum charge seen for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MonoMass">
            <summary>
            The feature monoisotopic mass
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.RepresentativeScan">
            <summary>
            The representative scan number for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.RepresentativeCharge">
            <summary>
            The representative charge number for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.RepresentativeMz">
            <summary>
            The representative m/z number for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Abundance">
            <summary>
            Feature abundance
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ApexScanNum">
            <summary>
            Scan number where the feature was observed with the highest intensity
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ApexIntensity">
            <summary>
            The highest observed intensity for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MinElutionTime">
            <summary>
            The minimum elution time for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.MaxElutionTime">
            <summary>
            The maximum elution time for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ElutionLength">
            <summary>
            The length of time the feature was eluting
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Envelope">
            <summary>
            The theoretical envelope of the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.LikelihoodRatio">
            <summary>
            The feature score
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ExtendedData">
            <summary>
            Extended data for the feature
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.WriteToFile(System.String,System.Collections.Generic.IEnumerable{InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry},System.Boolean)">
            <summary>
            Write the data to a ms1ft file
            </summary>
            <param name="filePath">path where the .ms1ft file should be written</param>
            <param name="features">features to output to the file</param>
            <param name="writeExtendedData">if true, the data in <see cref="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ExtendedData"/> will also be output to the .ms1ft file</param>
        </member>
        <member name="M:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ReadFromFile(System.String,System.Boolean)">
            <summary>
            Read the data from a ms1ft file
            </summary>
            <param name="filePath">path to .ms1ft file</param>
            <param name="readExtendedData">if true, and file has extended data, <see cref="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.ExtendedData"/> will be populated from the file</param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Ms1FtEntryMap">
            <summary>
            Class mapping <see cref="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry"/> properties to text file columns, excluding extended data
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Ms1FtEntryMap.ColumnCount">
            <summary>
            Column count used to provide indices
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Ms1FtEntryMap.GetColumnCount">
            <summary>
            Column count used to provide indices
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Ms1FtEntryMap.#ctor">
            <summary>
            Constructor: Create the mapping
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Ms1FtExtendedEntryMap">
            <summary>
            Class mapping <see cref="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry"/> with <see cref="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData"/> properties to text file columns
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntry.Ms1FtExtendedEntryMap.#ctor">
            <summary>
            Constructor: Create the mapping, inheriting the base mapping
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData">
            <summary>
            Extended data that may be written to a ms1ft file
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.BestEvenCharge">
            <summary>
            The best even charge for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.BestOddCharge">
            <summary>
            The best odd charge for the feature
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.CorrEvenCharge">
            <summary>
            The best correlation score across the charge (even charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.CorrOddCharge">
            <summary>
            The best correlation score across the charge (odd charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.IntensityEvenCharge">
            <summary>
            The best intensity score across the charge (even charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.IntensityOddCharge">
            <summary>
            The best intensity score across the charge (odd charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.SummedCorrEvenCharge">
            <summary>
            The envelope correlation score across the charge (even charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.SummedCorrOddCharge">
            <summary>
            The envelope correlation score across the charge (odd charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.SummedIntensityEvenCharge">
            <summary>
            The envelope intensity score across the charge (even charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.SummedIntensityOddCharge">
            <summary>
            The envelope intensity score across the charge (odd charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.XicCorrBetCharges1">
            <summary>
            The XIC correlation between best charges (even charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.XicCorrBetCharges2">
            <summary>
            The XIC correlation between best charges (odd charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.AbundanceRatioEvenCharge">
            <summary>
            The abundance distribution across the charge (even charge)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.AbundanceRatioOddCharge">
            <summary>
            The abundance distribution across the charge (odd charge)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.Ms1FtEntryExtendedDataMap">
            <summary>
            Class mapping <see cref="T:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData"/> properties to text file columns
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.Ms1FtEntryExtendedDataMap.ColumnCount">
            <summary>
            Column count used to provide indices
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.FeatureFindingResults.Ms1FtEntryExtendedData.Ms1FtEntryExtendedDataMap.#ctor">
            <summary>
            Constructor: Create the mapping
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor">
            <summary>
            Interface for objects that can supply chromatograms
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullPrecursorIonExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullPrecursorIonExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullProductExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IChromatogramExtractor.GetFullProductExtractedIonChromatogram(System.Double,System.Double,System.Double)">
            <summary>
            Returns a xic for the chosen range that covers the entire run.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <param name="precursorIonMz"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ILcMsRun">
            <summary>
            Interface for LcMsRun data objects
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ILcMsRun.IsDia">
            <summary>
            True if the dataset is DIA data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetFragmentationSpectraScanNums(InformedProteomics.Backend.Data.Biology.Ion)">
            <summary>
            Gets scan numbers of the fragmentation spectra whose isolation window contains the precursor ion specified
            </summary>
            <param name="precursorIon"></param>
            <returns>scan numbers of fragmentation spectra</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ILcMsRun.GetFragmentationSpectraScanNums(System.Double)">
            <summary>
            Gets scan numbers of the fragmentation spectra whose isolation window contains the precursor ion specified
            </summary>
            <param name="mostAbundantIsotopeMz"></param>
            <returns>scan numbers of fragmentation spectra</returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader">
            <summary>
            Interface for objects that can supply mass spectrometry data, usually from a file
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.ReadAllSpectra(System.Boolean)">
            <summary>
            Gets all spectra
            </summary>
            <param name="includePeaks"></param>
            <returns>all spectra</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number.
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.) - lower case, hex characters only (no dashes)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IMassSpecDataReader.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.IPbfLcMsRun">
            <summary>
            Interface for PbfLcMsRun, primarily for cases where PbfLcMsRun properties/functions are needed within the backend
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.IPbfLcMsRun.PbfFileChecksum">
            <summary>
            SHA-1 Checksum of the pbf file, calculated on first access to this property - lowercase, hex only
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor">
            <summary>
            Interface for objects that can supply random access to spectra
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.MinLcScan">
            <summary>
            Index of first LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.MaxLcScan">
            <summary>
            Index of last LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.GetElutionTime(System.Int32)">
            <summary>
            Get the elution time of the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.GetMsLevel(System.Int32)">
            <summary>
            Gets the MS level of the specified scan
            </summary>
            <param name="scanNum">scan number</param>
            <returns>MS level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.GetPrevScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the greatest scan number smaller than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>previous scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.GetNextScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the smallest scan number larger than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>next scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.GetScanNumbers(System.Int32)">
            <summary>
            Gets the scan numbers of the specified msLevel
            </summary>
            <param name="msLevel">MS level</param>
            <returns>scan numbers of the specified msLevel</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumAccessor.GetIsolationWindow(System.Int32)">
            <summary>
            Read and return the isolation window for the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.ISpectrumExtractor">
            <summary>
            Interface for objects that can supply spectra
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.ISpectrumExtractor.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Read the specified spectrum from the file, optionally reading only the metadata
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.LcMsRun">
            <summary>
            Base class for objects that provide access to LCMS run data
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.NumUniqueIsolationWindowThresholdForDia">
            <summary>
            Number of unique isolation windows kept for DIA data
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.IsolationWindowBinningFactor">
            <summary>
            Factor used to bin isolation window data
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MinLcScan">
            <summary>
            Index of first LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MaxLcScan">
            <summary>
            Index of last LC scan in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.NumSpectra">
            <summary>
            The number of spectra in the file.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MinMsLevel">
            <summary>
            Lowest MS Level in the dataset. Usually 1.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MaxMsLevel">
            <summary>
            Highest MS Level in the dataset.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.AllScanNumbers">
            <summary>
            List of all scan numbers in the dataset
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MinMs1Mz">
            <summary>
            The smallest MS1 m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.MaxMs1Mz">
            <summary>
            The largest MS1 m/z
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.IsDia">
            <summary>
            True if the dataset is DIA data
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.#ctor">
            <summary>
            Default values for configuration properties
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.Close">
            <summary>
            Close the reader
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.Dispose">
            <summary>
            Properly dispose of all unmanaged resources (specifically, file handles)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.ReadAllSpectra(System.Boolean)">
            <summary>
            Gets all spectra
            </summary>
            <param name="includePeaks"></param>
            <returns>all spectra</returns>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.NativeIdFormat">
            <summary>
            The NativeIdFormat stored/used by the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000767, native spectrum identifier format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.NativeFormat">
            <summary>
            The Native Format of the source file - needed for tracking purposes.
            Child term of PSI-MS term MS:1000560, mass spectrometer file format
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.FilePath">
            <summary>
            Path to the file; is <see cref="F:System.String.Empty"/> if the reader is in-memory
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.SrcFileChecksum">
            <summary>
            SHA-1 Checksum of the original input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.FileFormatVersion">
            <summary>
            Version of the immediate prior input file (raw, mzML, .d folder, etc.)
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.ReadMassSpectrum(System.Int32,System.Boolean)">
            <summary>
            Returns the spectrum specified by the scan number.
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.TryMakeRandomAccessCapable">
            <summary>
            Try to make the reader random access capable
            </summary>
            <returns>true if is random access capable, false if not</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetSpectrum(System.Int32,System.Boolean)">
            <summary>
            Return the specified spectrum from the file, optionally reading only the metadata
            </summary>
            <param name="scanNum"></param>
            <param name="includePeaks"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMs1Spectrum(System.Int32,System.Int32@)">
            <summary>
            If <paramref name="scanNum"/> is a MS1 scan, return it; otherwise, return null.
            </summary>
            <param name="scanNum"></param>
            <param name="ms1ScanIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetIsolationWindow(System.Int32)">
            <summary>
            Return the isolation window for the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMsLevel(System.Int32)">
            <summary>
            Gets the MS level of the specified scan
            </summary>
            <param name="scanNum">scan number</param>
            <returns>MS level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetElutionTime(System.Int32)">
            <summary>
            Get the elution time of the specified scan number
            </summary>
            <param name="scanNum"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorScanNum(System.Int32)">
            <summary>
            Gets the precursor scan number
            </summary>
            <param name="scanNum"></param>
            <returns>precursor scan number or 0 for MS1</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetNextScanNum(System.Int32)">
            <summary>
            Gets the next scan number whose ms level is smaller by 1
            </summary>
            <param name="scanNum">scan number</param>
            <returns>next scan number or MaxLc for MS1</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrevScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the greatest scan number smaller than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>previous scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetNextScanNum(System.Int32,System.Int32)">
            <summary>
            Gets the smallest scan number larger than ms2ScanNum
            </summary>
            <param name="scanNum">scan number</param>
            <param name="msLevel">MS level</param>
            <returns>next scan number at the specified level</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetScanNumbers(System.Int32)">
            <summary>
            Gets the scan numbers of the specified msLevel
            </summary>
            <param name="msLevel">MS level</param>
            <returns>scan numbers of the specified msLevel</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMs1ScanVector">
            <summary>
            An array of all of the MS1 scan numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMs1ScanNumToIndex">
            <summary>
            Array of length MaxLcScan where entries that are non-zero are the scan index of the given scan number
            </summary>
            <returns></returns>
            <remarks>
            For example, if scan 7 is the 5th MS1 scan in the dataset, then _ms1ScanNumToIndex[7] is 4
            Entries in the array that are 0 mean that MS1 scan does not map to an index
            (exception: scan 1 is listed as index 0)
            </remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.HigherPrecursorChromatogramCacheSize">
            <summary>
            Number of extra precursor chromatogram points to cache on the higher-m/z side of a requested XIC
            </summary>
            <remarks>This will be ignored for any size less than 20 (i.e., no caching on the higher-m/z side will occur)
            This property is specifically designed for use in getting large numbers of XICs that are very close in m/z; a high value will cause degraded performance when reading XICs at random</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.MassSpecData.LcMsRun.LowerPrecursorChromatogramCacheSize">
            <summary>
            Number of extra precursor chromatogram points to cache on the lower-m/z side of a requested XIC
            </summary>
            <remarks>This will be ignored for any size less than 20 (i.e., no caching on the lower-m/z side will occur)
            This property is specifically designed for use in getting large numbers of XICs that are very close in m/z; a high value will cause degraded performance when reading XICs at random</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullPrecursorIonExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullPrecursorIonExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            XicPoint is created for every MS1 scan.
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullPrecursorIonExtractedIonChromatogramVector(System.Double,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <returns>An array of doubles, with every intensity value in the provided m/z range</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z (using only MS1 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,System.Double)">
            <summary>
            Returns selected peaks between minMz and maxMz. The biggest peak per scan is selected.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Int32,System.Int32)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            Only XicPeaks around the targetScanNum are returned
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="targetScanNum">target scan number to generate xic</param>
            <param name="maxNumConsecutiveScansWithoutPeak">maximum number of consecutive scans with a peak</param>
            <returns>XIC around targetScanNum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorExtractedIonChromatogram(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS1 spectra)
            Only XicPeaks around the targetScanNum are returned
            </summary>
            <param name="minMz">min m/z</param>
            <param name="maxMz">max m/z</param>
            <param name="targetScanNum">target scan number to generate xic</param>
            <param name="tolerance">max number of consecutive scans without a peak</param>
            <returns>XIC around targetScanNum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetPrecursorChromatogramRange(System.Double,System.Double)">
            <summary>
            Returns all precursor peaks between minMz and maxMz, including multiple peaks per scan
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullProductExtractedIonChromatogram(System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance,System.Double)">
            <summary>
            Gets the extracted ion chromatogram of the specified m/z range (using only MS2 spectra)
            </summary>
            <param name="mz">target m/z</param>
            <param name="tolerance">tolerance</param>
            <param name="precursorIonMz">precursor m/z of the precursor ion</param>
            <returns>XIC as an Xic object</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFullProductExtractedIonChromatogram(System.Double,System.Double,System.Double)">
            <summary>
            Returns a xic for the chosen range that covers the entire run.
            </summary>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <param name="precursorMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetTrimmedXic(InformedProteomics.Backend.Data.Spectrometry.Xic,System.Int32,System.Int32)">
            <summary>
            Get a segment of Xic containing the targetScanNum
            </summary>
            <param name="xic">xic to be trimmed</param>
            <param name="targetScanNum">target scan number to generate xic</param>
            <param name="tolerance">number of scans that can be tolerated</param>
            <returns>Trimmed XIC around targetScanNum</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetNumUniqueIsoWindows">
            <summary>
            Return the number of unique isolation windows in the dataset
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetMinIsolationWindowWidth">
            <summary>
            Get the narrowest isolation window width
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFragmentationSpectraScanNums(InformedProteomics.Backend.Data.Biology.Ion)">
            <summary>
            Gets scan numbers of the fragmentation spectra whose isolation window contains the precursor ion specified
            </summary>
            <param name="precursorIon"></param>
            <returns>scan numbers of fragmentation spectra</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.GetFragmentationSpectraScanNums(System.Double)">
            <summary>
            Gets scan numbers of the fragmentation spectra whose isolation window contains the precursor ion specified
            </summary>
            <param name="mostAbundantIsotopeMz"></param>
            <returns>scan numbers of fragmentation spectra</returns>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.IsolationMzBinToScanNums">
            <summary>
            Dictionary to map IsolationMzBins to scan numbers
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.ScanNumToMsLevel">
            <summary>
            Dictionary to map scan numbers to MS Levels
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.ScanNumElutionTimeMap">
            <summary>
            Dictionary to map scan numbers to elution times
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MassSpecData.LcMsRun.IsDiaOrNull">
            <summary>
            True if DIA data, false if not, null if unknown
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRun.CreatePrecursorNextScanMap">
            <summary>
            Create the maps for linking MSn scans to their precursors, and for getting the next MS1 scan number given a scan number
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.MassSpecData.LcMsRunExtensions">
            <summary>
            Extension methods for ILcMsRun and ISpectrumAccessor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRunExtensions.GetSummedSpectrum(InformedProteomics.Backend.MassSpecData.ISpectrumAccessor,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Produce a summed spectrum using the data in the scans specified by <paramref name="scanNums"/>
            </summary>
            <param name="lcmsRun"></param>
            <param name="scanNums"></param>
            <param name="repScanNum">Representative scan number</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRunExtensions.GetSummedMs1Spectrum(InformedProteomics.Backend.MassSpecData.ISpectrumAccessor,System.Int32,System.Double)">
            <summary>
            Create a summed MS1 spectrum from the scans within <paramref name="elutionTimeTolerance"/> of <paramref name="scanNum"/>
            </summary>
            <param name="lcmsRun"></param>
            <param name="scanNum"></param>
            <param name="elutionTimeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRunExtensions.GetSummedMs1Spectrum(InformedProteomics.Backend.MassSpecData.ISpectrumAccessor,System.Int32,System.Int32)">
            <summary>
            Create a summed MS1 spectrum from the scans in the supplied range
            </summary>
            <param name="lcmsRun"></param>
            <param name="minScanNum">min scan number, inclusive</param>
            <param name="maxScanNum">max scan number, inclusive</param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MassSpecData.LcMsRunExtensions.GetSummedMs2Spectrum(InformedProteomics.Backend.MassSpecData.ILcMsRun,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,InformedProteomics.Backend.Data.Spectrometry.ActivationMethod)">
            <summary>
            Get a summed MS2 spectrum from the dataset, with the provided limits
            </summary>
            <param name="lcmsRun"></param>
            <param name="monoIsotopicMass"></param>
            <param name="minScanNum">min scan number, inclusive</param>
            <param name="maxScanNum">max scan number, inclusive</param>
            <param name="minCharge">min charge, inclusive</param>
            <param name="maxCharge">max charge, inclusive</param>
            <param name="activationMethod"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.ArrayUtil">
            <summary>
            Static class with array handling utilities
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.ArrayUtil.ToString``1(``0[],System.String,System.String)">
            <summary>
            Create a string to display the array values.
            </summary>
            <param name="array">The array</param>
            <param name="delimiter">Delimiter character</param>
            <param name="format">Optional. A string to use to format each value. Must contain the colon, so something like ':0.000'</param>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.ArrayUtil.ToString``1(``0[][],System.String,System.String)">
            <summary>
            Create a string to display the array values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="delimiter"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.ArrayUtil.GetRankings(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Return an array ranking every value in <paramref name="values"/>, highest value 1 and lowest value n
            </summary>
            <param name="values"></param>
            <param name="lowerBoundValue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.ArrayUtil.GetRankings(System.Collections.Generic.IEnumerable{System.Double},System.Double@,System.Double)">
            <summary>
            Return an array ranking every value in <paramref name="values"/>, highest value 1 and lowest value n
            </summary>
            <param name="values"></param>
            <param name="median"></param>
            <param name="lowerBoundValue"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.ArrayUtil.MaxSumSubarray(System.Collections.Generic.IList{System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Kadane's algorithm
            </summary>
            <param name="a"></param>
            <param name="start"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.ArrayUtil.MaxSumSubarray(System.Collections.Generic.IList{System.Double},System.Int32@,System.Int32@)">
            <summary>
            Kadane's algorithm
            https://en.wikipedia.org/wiki/Maximum_subarray_problem
            </summary>
            <param name="a"></param>
            <param name="start"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.CubicSpline">
            <summary>
            Cubic spline interpolation.
            Call Fit (or use the corrector constructor) to compute spline coefficients, then Eval to evaluate the spline at other X coordinates.
            </summary>
            <remarks>
            <para>
            This is implemented based on the wikipedia article:
            http://en.wikipedia.org/wiki/Spline_interpolation
            I'm not sure I have the right to include a copy of the article so the equation numbers referenced in
            comments will end up being wrong at some point.
            </para>
            <para>
            This is not optimized, and is not MT safe.
            This can extrapolate off the ends of the splines.
            You must provide points in X sort order.
            </para>
            </remarks>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.#ctor(System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Construct and call Fit.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.CheckAlreadyFitted">
            <summary>
            Throws if Fit has not been called.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.GetNextXIndex(System.Single)">
            <summary>
            Find where in xOrig the specified x falls, by simultaneous traverse.
            This allows xs to be less than x[0] and/or greater than x[n-1]. So allows extrapolation.
            This keeps state, so requires that x be sorted and xs called in ascending order, and is not multi-thread safe.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.EvalSpline(System.Single,System.Int32,System.Boolean)">
            <summary>
            Evaluate the specified x value using the specified spline.
            </summary>
            <param name="x">The x value.</param>
            <param name="j">Which spline to use.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The y value.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.FitAndEval(System.Single[],System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Fit x,y and then eval at points xs and return the corresponding y's.
            This does the "natural spline" style for ends.
            This can extrapolate off the ends of the splines.
            You must provide points in X sort order.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="xs">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each xs.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.Fit(System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Compute spline coefficients for the specified x,y points.
            This does the "natural spline" style for ends.
            This can extrapolate off the ends of the splines.
            You must provide points in X sort order.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.Eval(System.Single[],System.Boolean)">
            <summary>
            Evaluate the spline at the specified x coordinates.
            This can extrapolate off the ends of the splines.
            You must provide X's in ascending order.
            The spline must already be computed before calling this, meaning you must have already called Fit() or FitAndEval().
            </summary>
            <param name="x">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each x.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.EvalSlope(System.Single[],System.Boolean)">
            <summary>
            Evaluate (compute) the slope of the spline at the specified x coordinates.
            This can extrapolate off the ends of the splines.
            You must provide X's in ascending order.
            The spline must already be computed before calling this, meaning you must have already called Fit() or FitAndEval().
            </summary>
            <param name="x">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each x.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.Compute(System.Single[],System.Single[],System.Single[],System.Single,System.Single,System.Boolean)">
            <summary>
            Static all-in-one method to fit the splines and evaluate at X coordinates.
            </summary>
            <param name="x">Input. X coordinates to fit.</param>
            <param name="y">Input. Y coordinates to fit.</param>
            <param name="xs">Input. X coordinates to evaluate the fitted curve at.</param>
            <param name="startSlope">Optional slope constraint for the first point. Single.NaN means no constraint.</param>
            <param name="endSlope">Optional slope constraint for the final point. Single.NaN means no constraint.</param>
            <param name="debug">Turn on console output. Default is false.</param>
            <returns>The computed y values for each xs.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.CubicSpline.FitGeometric(System.Single[],System.Single[],System.Int32,System.Single[]@,System.Single[]@)">
            <summary>
            Fit the input x,y points using a 'geometric' strategy so that y does not have to be a single-valued
            function of x.
            </summary>
            <param name="x">Input x coordinates.</param>
            <param name="y">Input y coordinates, do not need to be a single-valued function of x.</param>
            <param name="nOutputPoints">How many output points to create.</param>
            <param name="xs">Output (interpolated) x values.</param>
            <param name="ys">Output (interpolated) y values.</param>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.FitScoreCalculator">
            <summary>
            Class containing various methods for computing fit scores
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetBhattacharyyaDistance(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the Bhattacharyya distance for the provided data
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="count"></param>
            <param name="v1Index"></param>
            <param name="v2Index"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetHyperGeometricPValue(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculate the HyperGeometric P value for the provided data
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <param name="n1"></param>
            <param name="k1"></param>
            <param name="upperTailProb"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetRankSumPValue(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculate the Rank Sum P value for the provided data
            </summary>
            <param name="n"></param>
            <param name="n1"></param>
            <param name="r1"></param>
            <param name="upperTailProb"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetDistanceAndCorrelation(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Bhattacharyya distance and Pearson correlation for the provided data
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="count"></param>
            <param name="v1Index"></param>
            <param name="v2Index"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetPearsonCorrelation(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the Pearson correlation for the provided data
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="count"></param>
            <param name="v1Index"></param>
            <param name="v2Index"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetCosine(System.Double[],System.Double[])">
            <summary>
            Calculate the cosine score for the provided data. Larger scores are better.
            </summary>
            <param name="theoreticalPeakList"></param>
            <param name="observedPeakList"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetDotProduct(System.Double[],System.Double[])">
            <summary>
            Calculate the dot product of the provided data
            </summary>
            <param name="theoreticalPeakList"></param>
            <param name="observedPeakList"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetDeconToolsFit(System.Double[],System.Double[])">
            <summary>
            Calculate the Decon Tools fit score for the provided data. Smaller scores are better.
            </summary>
            <param name="theoreticalPeakList"></param>
            <param name="observedPeakList"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.FitScoreCalculator.GetFitOfNormalizedVectors(System.Double[],System.Double[])">
            <summary>
            Calculate the fit of Normalized vectors using the provided data.
            </summary>
            <param name="normTheoreticalPeakList"></param>
            <param name="normObservedPeakList"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.OtsuThreshold">
            <summary>
            Class for calculating Otsu threshold
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.OtsuThreshold.GetThreshold(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Otsu threshold for the provided data
            </summary>
            <param name="data"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="intervalX"></param>
            <param name="xLb"></param>
            <param name="xUb"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.OtsuThreshold.GetThreshold(System.Double[][],System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculate the Otsu threshold for the provided data
            </summary>
            <param name="data"></param>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="intervalX"></param>
            <param name="minRow"></param>
            <param name="maxRow"></param>
            <param name="minCol"></param>
            <param name="maxCol"></param>
            <param name="xLb"></param>
            <param name="xUb"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.SavitzkyGolaySmoother">
            <summary>
            Savitzky-Golay Smoothing implementation
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SavitzkyGolaySmoother.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pointsForSmoothing"></param>
            <param name="polynomialOrder"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SavitzkyGolaySmoother.Smooth(System.Double[0:,0:]@)">
            <summary>
            Smooth the provided 2-dimensional array
            </summary>
            <param name="inputValues"></param>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SavitzkyGolaySmoother.Smooth(System.Double[])">
            <summary>
            Smooth the provided array
            </summary>
            <param name="inputValues"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.SimpleMath">
            <summary>
            Simple math algorithms and tools
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.NChooseK(System.Int32,System.Int32)">
            <summary>
            Calculate n choose k
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetCombination(System.Int32,System.Int32)">
            <summary>
            Get the combination for n and k
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetLogCombination(System.Int32,System.Int32)">
            <summary>
            Get the log combination for n and k
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetCombinationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Get the combinations with repetition for n and length
            </summary>
            <param name="n"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetNtoTheKCombinations(System.Int32,System.Int32)">
            <summary>
            Get n to the k combinations
            </summary>
            <param name="n"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetCorrelation(System.Double[],System.Double[])">
            <summary>
            Get the correlation score between 2 arrays
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetSampleMean(System.Double[])">
            <summary>
            Get the mean of the values in <paramref name="x"/>
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetSampleVariance(System.Double[],System.Double)">
            <summary>
            Get the variance of the values in <paramref name="x"/>
            </summary>
            <param name="x"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetSampleMean(System.Single[])">
            <summary>
            Get the mean of the values in <paramref name="x"/>
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetSampleVariance(System.Single[],System.Single)">
            <summary>
            Get the variance of the values in <paramref name="x"/>
            </summary>
            <param name="x"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetFactors(System.Int32)">
            <summary>
            Get the factors of x
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.SimpleMath.GetKLDivergence(System.Double[],System.Double[])">
            <summary>
            Get the KL Divergence of the provided data
            </summary>
            <param name="P"></param>
            <param name="Q"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF">
            <summary>
            A tri-diagonal matrix has non-zero entries only on the main diagonal, the diagonal above the main (super), and the
            diagonal below the main (sub).
            </summary>
            <remarks>
            <para>
            This is based on the wikipedia article: http://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm
            </para>
            <para>
            The entries in the matrix on a particular row are A[i], B[i], and C[i] where i is the row index.
            B is the main diagonal, and so for an NxN matrix B is length N and all elements are used.
            So for row 0, the first two values are B[0] and C[0].
            And for row N-1, the last two values are A[N-1] and B[N-1].
            That means that A[0] is not actually on the matrix and is therefore never used, and same with C[N-1].
            </para>
            </remarks>
        </member>
        <member name="F:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.A">
            <summary>
            The values for the sub-diagonal. A[0] is never used.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.B">
            <summary>
            The values for the main diagonal.
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.C">
            <summary>
            The values for the super-diagonal. C[C.Length-1] is never used.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.N">
            <summary>
            The width and height of this matrix.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.Item(System.Int32,System.Int32)">
            <summary>
            Indexer. Setter throws an exception if you try to set any not on the super, main, or sub diagonals.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.#ctor(System.Int32)">
            <summary>
            Construct an NxN matrix.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.ToDisplayString(System.String,System.String)">
            <summary>
            Produce a string representation of the contents of this matrix.
            </summary>
            <param name="fmt">Optional. For String.Format. Must include the colon. Examples are ':0.000' and ',5:0.00' </param>
            <param name="prefix">Optional. Per-line indentation prefix.</param>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.TriDiagonalMatrixF.Solve(System.Single[])">
            <summary>
            Solve the system of equations this*x=d given the specified d.
            </summary>
            <remarks>
            Uses the Thomas algorithm described in the wikipedia article: http://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm
            Not optimized. Not destructive.
            </remarks>
            <param name="d">Right side of the equation.</param>
        </member>
        <member name="T:InformedProteomics.Backend.MathAndStats.VennDiagram`1">
            <summary>
            Venn Diagram calculation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:InformedProteomics.Backend.MathAndStats.VennDiagram`1.#ctor(System.Collections.Generic.ISet{`0},System.Collections.Generic.ISet{`0})">
            <summary>
            Constructor
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.VennDiagram`1.Set1">
            <summary>
            Set 1 data
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.VennDiagram`1.Set2">
            <summary>
            Set 2 data
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.VennDiagram`1.Intersection">
            <summary>
            Intersection of Set 1 and set 2
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.VennDiagram`1.Set1Only">
            <summary>
            Set 1 - set 2
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.MathAndStats.VennDiagram`1.Set2Only">
            <summary>
            Set 2 - set 1
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData">
            <summary>
            Container with utilities for reading/writing/storing database search results.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.ScanNum">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Pre">
            <summary>
            Pre residue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Sequence">
            <summary>
            Peptide sequence
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Post">
            <summary>
            Post residue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Modifications">
            <summary>
            Name and location of modifications
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Composition">
            <summary>
            Match elemental composition (including modifications)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.ProteinName">
            <summary>
            Name of Protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.ProteinDescription">
            <summary>
            Protein Description
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.ProteinLength">
            <summary>
            Length of protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Start">
            <summary>
            Start index of sequence in protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.End">
            <summary>
            End index of sequence in protein
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Charge">
            <summary>
            Charge
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.MostAbundantIsotopeMz">
            <summary>
            m/z of most abundant isotope
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Mass">
            <summary>
            Calculated mass (monoisotopic m/z)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.NumMatchedFragments">
            <summary>
            Number of matched fragments
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Probability">
            <summary>
            Match Probability
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.SpecEValue">
            <summary>
            SpecEValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.EValue">
            <summary>
            EValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.QValue">
            <summary>
            QValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.PepQValue">
            <summary>
            PepQValue
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.HasTdaScores">
            <summary>
            If the FDR scores (QValue and PepQValue) have been set
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.SequenceWithEnds">
            <summary>
            The sequence, with the pre and post residues
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.Ms1Feature">
            <summary>
            Ms1Feature id
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.WriteResultsToFile(System.String,System.Collections.Generic.IEnumerable{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData},System.Boolean)">
            <summary>
            Write the resultData in TSV format to the specified path, possibly including FDR scores
            </summary>
            <param name="filePath"></param>
            <param name="resultData"></param>
            <param name="includeTdaScores">If FDR scores should be output also</param>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.ReadResultsFromFile(System.String)">
            <summary>
            Read in result data from the specified TSV format file.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.DatabaseSearchResultData.ReadResultsFromFileToMzIdData(System.String)">
            <summary>
            Read results from tsv file into group of objects from PSI_Interface
            </summary>
            <param name="idFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.SearchResults.Extensions">
            <summary>
            Extension methods for the namespace
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.Extensions.GetPeptides(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData},System.Double)">
            <summary>
            Get peptides that pass the specified threshold
            </summary>
            <param name="results"></param>
            <param name="pepQValueThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.Extensions.GetPeptidesAboveQValueThreshold(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData},System.Double)">
            <summary>
            Get peptides that pass the specified threshold
            </summary>
            <param name="results"></param>
            <param name="qValueThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.Extensions.GetPeptidesAboveThreshold(System.Collections.Generic.IEnumerable{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData},System.Func{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData,System.Double},System.Double)">
            <summary>
            Gets the peptides where the specified field passes the provided threshold
            </summary>
            <param name="results"></param>
            <param name="fieldSelector">A function, e.g. x => x.QValue</param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.SearchResults.FdrCalculator">
            <summary>
            Computes the False Decoy Ratio and scores for the supplied target and decoy hits
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.FdrCalculator.NumPSMs">
            <summary>
            Number of PSMs with a QValue &lt; 0.01
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.FdrCalculator.NumPeptides">
            <summary>
            Number of peptides with a PepQValue &lt; 0.01
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.FdrCalculator.ErrorMessage">
            <summary>
            Error message, if FDR calculation fails
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.SearchResults.FdrCalculator.FilteredResults">
            <summary>
            The full list of filtered results, with FDR scores added
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.FdrCalculator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiate the FDR calculator
            </summary>
            <param name="targetResultFilePath"></param>
            <param name="decoyResultFilePath"></param>
            <param name="multiplePeptidesPerScan"></param>
            <remarks>If an error occurs, ErrorMessage will be non-null</remarks>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.FdrCalculator.#ctor(System.Collections.Generic.IReadOnlyCollection{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData},System.Collections.Generic.IReadOnlyCollection{InformedProteomics.Backend.SearchResults.DatabaseSearchResultData},System.Boolean)">
            <summary>
            Instantiate the FDR calculator
            </summary>
            <param name="targetResults"></param>
            <param name="decoyResults"></param>
            <param name="multiplePeptidesPerScan"></param>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.FdrCalculator.HasError">
            <summary>
            True if there was an error calculating the FDR scores
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.FdrCalculator.WriteTo(System.String,System.Boolean)">
            <summary>
            Write the results with the FDR data to the specified file
            </summary>
            <param name="outputFilePath"></param>
            <param name="includeDecoy"></param>
        </member>
        <member name="T:InformedProteomics.Backend.SearchResults.IdentificationExtensions">
            <summary>
            Extension functions for working with identification data.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.IdentificationExtensions.GetIpSequence(PSI_Interface.IdentData.SimpleMZIdentMLReader.PeptideRef)">
            <summary>
            Convert the sequence information from the external types to the internal types
            </summary>
            <param name="peptide"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.SearchResults.ResultFileReader">
            <summary>
            Reader factory for result files
            </summary>
        </member>
        <member name="F:InformedProteomics.Backend.SearchResults.ResultFileReader.SupportedResultsFiles">
            <summary>
            File extensions supported by the results reader.
            These extensions need to be lowercase
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.SearchResults.ResultFileReader.ReadResultFile(System.String)">
            <summary>
            Read the file at path <paramref name="filePath"/>.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.AnonymousComparer`1">
            <summary>
            Class used for helping create an IComparer class for binary search.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.AnonymousComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Constructor that requires the Comparison be passed in.
            </summary>
            <param name="comparison">The Comparison to be used for the binary search.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.AnonymousComparer`1.Compare(`0,`0)">
            <summary>
            Compares 2 objects using the Comparison passed in when creating the AnonymousComparer class.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>
            Less than zero if the first object precedes the second.
            Zero if the objects occur in the same position.
            Greater than zero if the first object follows the second.
            </returns>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.Centroider">
            <summary>
            Centroid spectra (copied from Skyline)
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.Centroider.Mzs">
            <summary>
            List of m/zs to be centroided
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.Centroider.Intensities">
            <summary>
            List of intensities to be centroided
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Centroider.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructor
            </summary>
            <param name="mzs"></param>
            <param name="intensities"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Centroider.GetCentroidedData(System.Double[]@,System.Double[]@)">
            <summary>
            Get the centroided data
            </summary>
            <param name="centroidedMzs"></param>
            <param name="centroidedIntensities"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IntRange">
            <summary>
            IntRange: min, max, and test functions for working with ranges
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IntRange.Contains(System.Int32)">
            <summary>
            Check if <paramref name="value"/> is within this range
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IntRange.Overlaps(InformedProteomics.Backend.Utils.IntRange)">
            <summary>
            Check if 2 IntRanges overlap
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IntRange.Union(InformedProteomics.Backend.Utils.IntRange,InformedProteomics.Backend.Utils.IntRange)">
            <summary>
            Create a new IntRange that is the union of 2 other ranges
            </summary>
            <param name="range1"></param>
            <param name="range2"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IntRange.Add(System.Int32)">
            <summary>
            Add <paramref name="v"/> to the values covered by this IntRange
            </summary>
            <param name="v"></param>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IntRange.Min">
            <summary>
            Minimum of this range
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IntRange.Max">
            <summary>
            Maximum of this range
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IntRange.Length">
            <summary>
            Length of this range
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IntRange.CompareTo(InformedProteomics.Backend.Utils.IntRange)">
            <summary>
            Compare 2 IntRanges
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner">
            <summary>
            Class attempts to find ideal concentration of particular isotope by comparing it to an
            observed isotopic profile.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.#ctor">
            <summary>
            Initializes new instance of the <see cref="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner" /> class.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Element">
            <summary>
            Gets or sets the element to manipulate isotope proportions for.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeIndex">
            <summary>
            Gets or sets the index of the isotope to manipulate, relative to the monoisotope.
            </summary>
            <remarks>Monoisotope is index 0.</remarks>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Tolerance">
            <summary>
            Gets the peak tolerance for matching observed peaks to theoretical peaks.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.ObservedPeaks">
            <summary>
            Gets or sets the list of observed peaks to compare to the theoretical isotope profile.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Mass">
            <summary>
            Gets or sets the monoisotopic mass of the ion to calculate isotope peaks for.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Charge">
            <summary>
            Gets or sets the charge of the ion to calculate isotope peaks for.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.StepSize">
            <summary>
            Gets or sets the amount to increase the concentration of the selected isotope index for each iteration.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.MaxConcentration">
            <summary>
            Gets or sets the maximum concentration of the selected isotope to consider.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.RelativeIntensityThreshold">
            <summary>
            Gets or sets the least abundant theoretical isotope peak to consider, relative to the highest theoretical isotope peak.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.Tune(System.IProgress{PRISM.ProgressData})">
            <summary>
            Try to find the best concentration of the selected isotope
            by stepping through the concentrations and fitting a theoretical
            isotopic profile to the provided observed peaks.
            </summary>
            <param name="progress">The progress reporter.</param>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.GetTheoreticalIsotopeProfile(System.Double[])">
            <summary>
            Gets the theoretical isotope profile calculated using Averagine with the provided
            isotope proportions.
            </summary>
            <param name="proportions">The proportions of each isotope.</param>
            <returns>The theoretical isotope profile peaks.</returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.AlignObservedPeaks(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Aligns observed peak list to theoretical peak list.
            </summary>
            <param name="observedPeaks"></param>
            <param name="theoreticalPeaks"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.GetDefaultProportions(InformedProteomics.Backend.Data.Biology.Atom)">
            <summary>
            Get the default isotope proportions for the given element.
            </summary>
            <param name="element">The element to get the default proportions for.</param>
            <returns>An array where each index is the </returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.ValidateParameters">
            <summary>
            Checks to make sure that the selected element is one that is possible to manipulate.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve">
            <summary>
            Class representing a the results of the isotope concentration tuning.
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve" />.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.DataPoints">
            <summary>
            Gets or sets the curve showing isotope concentration vs pearson correlation with fit to observed peaks.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.BestConcentration">
            <summary>
            The concentration with the best fit with observed peaks.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint">
            <summary>
            Class representing a single point in the curve showing concentration vs correlation.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint.IsotopeConcentration">
            <summary>
            Gets the concentration of selected isotope.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint.MonoisotopeConcentration">
            <summary>
            Gets the concentration of monoisotope..
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.IsotopicConcentrationTuner.IsotopeConcentrationCorrelationCurve.ConcentrationCorrelationPoint.PearsonCorrelation">
            <summary>
            Gets pearson correlation of the isotope concentration fit to the observed peaks.
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.Misc">
            <summary>
            Miscellaneous utilities
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateFromVersion">
            <summary>
            Parse the assembly's version to try to get a build date
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateFromVersion(System.Version)">
            <summary>
            Parse the supplied version to try to get a build date
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateTextFromVersion">
            <summary>
            Parse the assembly's version to try to get a build date
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.Misc.GetBuildDateTextFromVersion(System.Version)">
            <summary>
            Parse the supplied version to try to get a build date
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.ParallelizationUtils">
            <summary>
            Helper class for determining what resources the system has that we can use, and for trying to not overload the system.
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.NumPhysicalCores">
            <summary>
            Number of physical cores in the system
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.NumPhysicalProcessors">
            <summary>
            Number of physical processors (sockets used) in the system
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.ParallelizationUtils.NumLogicalCores">
            <summary>
            The number of logical cores in the system (includes hyperthreading cores)
            </summary>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.PeakListUtils">
            <summary>
            Peak List utilities
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.FindPeak(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Find the highest-intensity peak that matches <paramref name="mz"/> within a tolerance
            </summary>
            <param name="peakList"></param>
            <param name="mz"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.FindPeak(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Double,System.Double)">
            <summary>
            Find the highest-intensity peak with the m/z range specified
            </summary>
            <param name="peakList"></param>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.FindAllPeaks(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Double,InformedProteomics.Backend.Data.Spectrometry.Tolerance)">
            <summary>
            Find all peaks that are in the range specified by <paramref name="mz"/> and a tolerance
            </summary>
            <param name="peakList"></param>
            <param name="mz"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.FindAllPeaks(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Double,System.Double)">
            <summary>
            Find all peaks that are in the range provided
            </summary>
            <param name="peakList"></param>
            <param name="minMz"></param>
            <param name="maxMz"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.GetPearsonCorrelation(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IComparer{InformedProteomics.Backend.Data.Spectrometry.Peak})">
            <summary>
            Get the Pearson correlation for the provided experimental and theoretical peaks
            </summary>
            <param name="spec"></param>
            <param name="isoProfile"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.GetCosine(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IComparer{InformedProteomics.Backend.Data.Spectrometry.Peak})">
            <summary>
            Get the cosine score for the provided experimental and theoretical peaks
            </summary>
            <param name="spec"></param>
            <param name="isoProfile"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.GetIntersection(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IComparer{InformedProteomics.Backend.Data.Spectrometry.Peak})">
            <summary>
            Get the intersection of the provided peak lists
            </summary>
            <param name="peakList1"></param>
            <param name="peakList2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.GetExceptWith(System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IComparer{InformedProteomics.Backend.Data.Spectrometry.Peak})">
            <summary>
            Compare two peak lists and create a list of peaks that are in peakList1 but not in peakList2
            </summary>
            <param name="peakList1"></param>
            <param name="peakList2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.Sum(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.IComparer{InformedProteomics.Backend.Data.Spectrometry.Peak})">
            <summary>
            Get the sum of the 2 peak lists
            </summary>
            <param name="peakList1"></param>
            <param name="peakList2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.PeakListUtils.FilterNoise(System.Collections.Generic.IList{InformedProteomics.Backend.Data.Spectrometry.Peak},System.Collections.Generic.List{InformedProteomics.Backend.Data.Spectrometry.Peak}@,System.Double)">
            <summary>
            Get a peak list where peaks before a threshold are removed
            </summary>
            <param name="peakList"></param>
            <param name="filteredPeakList"></param>
            <param name="signalToMedianRatio"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.ProgressData">
            <summary>
            Add functionality to progress reporting using <see cref="T:System.IProgress`1"/>
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.ProgressData.#ctor(System.IProgress{InformedProteomics.Backend.Utils.ProgressData},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="progress">The progress object that "ProgressData.Report" should call "Report" on</param>
            <param name="preventBackwardsProgress">Set to false to disable the logic preventing reverse progress</param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.SimpleStringProcessing">
            <summary>
            Simple string processing functions
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.SimpleStringProcessing.Shuffle(System.String)">
            <summary>
            Random shuffle a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.SimpleStringProcessing.Mutate(System.String,System.Int32)">
            <summary>
            Perform a set number of random mutations on a string
            </summary>
            <param name="str"></param>
            <param name="numMutations"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.SimpleStringProcessing.GetStringBetweenDots(System.String)">
            <summary>
            Get the string between 2 periods, so A.PEPTIDE.J returns PEPTIDE
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.SimpleStringProcessing.DefineRandomNumberGeneratorSeed(System.Int32)">
            <summary>
            Re-initialize the random number generator using the specified seed
            </summary>
            <param name="seed"></param>
        </member>
        <member name="T:InformedProteomics.Backend.Utils.TsvFileParser">
            <summary>
            Parses the data in a tab-delimited file, caching the data in memory
            </summary>
            <remarks>
            The data is stored in memory both as full rows (one string per row), and parsed by column
            Column names are case-sensitive
            </remarks>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.#ctor(System.String,System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="filePath">File to read</param>
            <param name="delimiter">Delimiter, tab by default</param>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.TsvFileParser.FileName">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:InformedProteomics.Backend.Utils.TsvFileParser.NumData">
            <summary>
            Number of rows
            </summary>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.GetHeaders">
            <summary>
            Get the TSV file headers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.GetAllData">
            <summary>
            Get all data in the TSV
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.GetData(System.String)">
            <summary>
            Get the data in the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.GetRows">
            <summary>
            Get all rows of data
            </summary>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.GetPeptides(System.Double)">
            <summary>
            Get peptides that pass the specified threshold
            </summary>
            <param name="pepQValueThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:InformedProteomics.Backend.Utils.TsvFileParser.GetPeptidesAboveQValueThreshold(System.Double)">
            <summary>
            Get peptides that pass the specified threshold
            </summary>
            <param name="qValueThreshold"></param>
            <returns></returns>
        </member>
        <member name="F:InformedProteomics.Backend.Utils.TsvFileParser._header">
            <summary>
            Map from header column index to header column name
            </summary>
        </member>
    </members>
</doc>
